{
  "address": "0xb28Ad73ebCE83861105B4354bB8F241040533026",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ETHWithdrawalFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "InvalidNewOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "accountsLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocationsLength",
          "type": "uint256"
        }
      ],
      "name": "InvalidSplit__AccountsAndAllocationsMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "InvalidSplit__AccountsOutOfOrder",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "InvalidSplit__AllocationMustBePositive",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "allocationsSum",
          "type": "uint32"
        }
      ],
      "name": "InvalidSplit__InvalidAllocationsSum",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "InvalidSplit__InvalidHash",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "splitterFee",
          "type": "uint32"
        }
      ],
      "name": "InvalidSplit__InvalidSplitterFee",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "accountsLength",
          "type": "uint256"
        }
      ],
      "name": "InvalidSplit__TooFewAccounts",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "split",
          "type": "address"
        }
      ],
      "name": "CreateSplit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "split",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "split",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SplitBalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "split",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SplitERC20Balance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "split",
          "type": "address"
        }
      ],
      "name": "UpdateSplit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "eth",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "contract ERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        }
      ],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        }
      ],
      "name": "cancelOwnershipTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "percentAllocations",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32",
          "name": "splitterFee",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "createSplit",
      "outputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getERC20Balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        }
      ],
      "name": "getETHBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        }
      ],
      "name": "getHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        }
      ],
      "name": "getNewPotentialOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        }
      ],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        }
      ],
      "name": "makeSplitImmutable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "percentAllocations",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32",
          "name": "splitterFee",
          "type": "uint32"
        }
      ],
      "name": "predictSplitAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "percentAllocations",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32",
          "name": "splitterFee",
          "type": "uint32"
        }
      ],
      "name": "splitBalanceFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "percentAllocations",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32",
          "name": "splitterFee",
          "type": "uint32"
        }
      ],
      "name": "splitERC20BalanceFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "percentAllocations",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32",
          "name": "splitterFee",
          "type": "uint32"
        }
      ],
      "name": "updateSplit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "walletImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "eth",
          "type": "bool"
        },
        {
          "internalType": "contract ERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "withdrawFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x20447118dbc9a3e4564d500b7b3639faf2b2c9de5e5ae07abe7512c7fdcccfbe",
  "receipt": {
    "to": null,
    "from": "0xB0A36b3CeDf210f37a5E7BC28d4b8E91D4E3C412",
    "contractAddress": "0xb28Ad73ebCE83861105B4354bB8F241040533026",
    "transactionIndex": 0,
    "gasUsed": "2429085",
    "logsBloom": "0x
    "blockHash": "0x56804fbc154e6417c0697c65571daf6244caca75a55639020b11a6f86f83c221",
    "transactionHash": "0x20447118dbc9a3e4564d500b7b3639faf2b2c9de5e5ae07abe7512c7fdcccfbe",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "2429085",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e95d4b80c7c51f4c0da19b17e69c7340",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHWithdrawalFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"InvalidNewOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accountsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocationsLength\",\"type\":\"uint256\"}],\"name\":\"InvalidSplit__AccountsAndAllocationsMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"InvalidSplit__AccountsOutOfOrder\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"InvalidSplit__AllocationMustBePositive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"allocationsSum\",\"type\":\"uint32\"}],\"name\":\"InvalidSplit__InvalidAllocationsSum\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"InvalidSplit__InvalidHash\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"splitterFee\",\"type\":\"uint32\"}],\"name\":\"InvalidSplit__InvalidSplitterFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accountsLength\",\"type\":\"uint256\"}],\"name\":\"InvalidSplit__TooFewAccounts\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"}],\"name\":\"CreateSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SplitBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SplitERC20Balance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"}],\"name\":\"UpdateSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"eth\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"contract ERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENTAGE_SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"}],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"}],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"percentAllocations\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32\",\"name\":\"splitterFee\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"createSplit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getERC20Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"}],\"name\":\"getETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"}],\"name\":\"getHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"}],\"name\":\"getNewPotentialOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"}],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"}],\"name\":\"makeSplitImmutable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"percentAllocations\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32\",\"name\":\"splitterFee\",\"type\":\"uint32\"}],\"name\":\"predictSplitAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"percentAllocations\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32\",\"name\":\"splitterFee\",\"type\":\"uint32\"}],\"name\":\"splitBalanceFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"percentAllocations\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32\",\"name\":\"splitterFee\",\"type\":\"uint32\"}],\"name\":\"splitERC20BalanceFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"percentAllocations\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32\",\"name\":\"splitterFee\",\"type\":\"uint32\"}],\"name\":\"updateSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"eth\",\"type\":\"bool\"},{\"internalType\":\"contract ERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"0xSplits\",\"details\":\"Split recipients, ownerships, and keeper fees are stored onchain as calldata & re-passed as args / validated via hashing when needed. Each split gets its own address & proxy for maximum composability with other contracts onchain. For these proxies, we extended EIP-1167 Minimal Proxy Contract to avoid `DELEGATECALL` for `receive()` to accept hard gas-capped `sends` & `transfers`.\",\"kind\":\"dev\",\"methods\":{\"acceptOwnership(address)\":{\"params\":{\"split\":\"Address of mutable split to accept ownership transfer for\"}},\"cancelOwnershipTransfer(address)\":{\"params\":{\"split\":\"Address of mutable split to cancel ownership transfer for\"}},\"createSplit(address[],uint32[],uint32,address)\":{\"params\":{\"accounts\":\"Ordered, unique list of addresses with ownership in the split\",\"owner\":\"Controlling address (0x0 if immutable)\",\"percentAllocations\":\"Percent allocations associated with each address\",\"splitterFee\":\"Keeper fee paid by split to cover gas costs of distribution\"}},\"getERC20Balance(address,address)\":{\"params\":{\"split\":\"Split to return balance for\",\"token\":\"Token to return balance for\"}},\"getETHBalance(address)\":{\"params\":{\"split\":\"Split to return eth balance for\"}},\"getHash(address)\":{\"params\":{\"split\":\"Split to return hash for\"}},\"getNewPotentialOwner(address)\":{\"params\":{\"split\":\"Split to return newPotentialOwner for\"}},\"getOwner(address)\":{\"params\":{\"split\":\"Split to return owner for\"}},\"makeSplitImmutable(address)\":{\"params\":{\"split\":\"Address of mutable split to turn immutable\"}},\"predictSplitAddress(address[],uint32[],uint32)\":{\"params\":{\"accounts\":\"Ordered, unique list of addresses with ownership in the split\",\"percentAllocations\":\"Percent allocations associated with each address\",\"splitterFee\":\"Keeper fee paid by split to cover gas costs of distribution\"}},\"splitBalanceFor(address,address[],uint32[],uint32)\":{\"details\":\"`accounts`, `percentAllocations`, and `splitterFee` are verified by hashing & comparing to the hash in storage associated with split `split`\",\"params\":{\"accounts\":\"Ordered, unique list of addresses with ownership in the split\",\"percentAllocations\":\"Percent allocations associated with each address\",\"split\":\"Address of split to split balance for\",\"splitterFee\":\"Keeper fee paid by split to cover gas costs of distribution\"}},\"splitERC20BalanceFor(address,address,address[],uint32[],uint32)\":{\"details\":\"`accounts`, `percentAllocations`, and `splitterFee` are verified by hashing & comparing to the hash in storage associated with split `split`\",\"params\":{\"accounts\":\"Ordered, unique list of addresses with ownership in the split\",\"percentAllocations\":\"Percent allocations associated with each address\",\"split\":\"Address of split to split balance for\",\"splitterFee\":\"Keeper fee paid by split to cover gas costs of distribution\",\"token\":\"Address of ERC20 to split balance for\"}},\"transferOwnership(address,address)\":{\"details\":\"Two-step ownership transfer inspired by [dharma](https://github.com/dharma-eng/dharma-smart-wallet/blob/master/contracts/helpers/TwoStepOwnable.sol)\",\"params\":{\"newOwner\":\"Address to begin transferring control to\",\"split\":\"Address of mutable split to transfer control for\"}},\"updateSplit(address,address[],uint32[],uint32)\":{\"params\":{\"accounts\":\"Ordered, unique list of addresses with ownership in the split\",\"percentAllocations\":\"Percent allocations associated with each address\",\"splitterFee\":\"Keeper fee paid by split to cover gas costs of distribution\"}},\"withdrawFor(address,bool,address[])\":{\"params\":{\"eth\":\"Bool of whether to withdraw eth\",\"tokens\":\"Addresses of ERC20s to withdraw for\"}}},\"title\":\"SplitMain\",\"version\":1},\"userdoc\":{\"errors\":{\"ETHWithdrawalFailed(uint256)\":[{\"notice\":\"ETH withdrawal of `amount` failed\"}],\"InvalidNewOwner(address)\":[{\"notice\":\"Invalid new controlling address `newOwner` for mutable split\"}],\"InvalidSplit__AccountsAndAllocationsMismatch(uint256,uint256)\":[{\"notice\":\"Array lengths of accounts & percentAllocations don't match (`accountsLength` != `allocationsLength`)\"}],\"InvalidSplit__AccountsOutOfOrder(uint256)\":[{\"notice\":\"Invalid accounts ordering at `index`\"}],\"InvalidSplit__AllocationMustBePositive(uint256)\":[{\"notice\":\"Invalid percentAllocation of zero at `index`\"}],\"InvalidSplit__InvalidAllocationsSum(uint32)\":[{\"notice\":\"Invalid percentAllocations sum `allocationsSum` must equal `PERCENTAGE_SCALE`\"}],\"InvalidSplit__InvalidHash(bytes32)\":[{\"notice\":\"Invalid hash `hash` from split data (accounts, percentAllocations, splitterFee)\"}],\"InvalidSplit__InvalidSplitterFee(uint32)\":[{\"notice\":\"Invalid splitterFee `splitterFee` cannot be greater than 10% (1e5)\"}],\"InvalidSplit__TooFewAccounts(uint256)\":[{\"notice\":\"Invalid number of accounts `accountsLength`, must have at least 2\"}],\"Unauthorized(address)\":[{\"notice\":\"Unauthorized sender `sender`\"}]},\"events\":{\"CreateSplit(address)\":{\"notice\":\"emitted after each successful split creation\"},\"OwnershipTransfer(address,address,address)\":{\"notice\":\"emitted after each successful split ownership transfer\"},\"SplitBalance(address,uint256)\":{\"notice\":\"emitted after each successful ETH balance split\"},\"SplitERC20Balance(address,address,uint256)\":{\"notice\":\"emitted after each successful ERC20 balance split\"},\"UpdateSplit(address)\":{\"notice\":\"emitted after each successful split update\"},\"Withdrawal(address,bool,address[],uint256[])\":{\"notice\":\"emitted after each successful withdrawal\"}},\"kind\":\"user\",\"methods\":{\"PERCENTAGE_SCALE()\":{\"notice\":\"constant to scale uints into percentages (1e6 == 100%)\"},\"acceptOwnership(address)\":{\"notice\":\"Accepts transfer of the controlling address of mutable split `split`\"},\"cancelOwnershipTransfer(address)\":{\"notice\":\"Cancels transfer of the controlling address of mutable split `split`\"},\"constructor\":{\"notice\":\"CONSTRUCTOR\"},\"createSplit(address[],uint32[],uint32,address)\":{\"notice\":\"Creates a new split with recipients `accounts` with ownerships `percentAllocations`, a keeper fee for splitting of `splitterFee` and the controlling address `owner`\"},\"getERC20Balance(address,address)\":{\"notice\":\"Returns the current erc20Balance of split `split` and erc20 token `token`\"},\"getETHBalance(address)\":{\"notice\":\"Returns the current eth balance of split `split`\"},\"getHash(address)\":{\"notice\":\"Returns the current hash of split `split`\"},\"getNewPotentialOwner(address)\":{\"notice\":\"Returns the current newPotentialOwner of split `split`\"},\"getOwner(address)\":{\"notice\":\"Returns the current owner of split `split`\"},\"makeSplitImmutable(address)\":{\"notice\":\"Turns mutable split `split` immutable\"},\"predictSplitAddress(address[],uint32[],uint32)\":{\"notice\":\"Predicts the address for an immutable split created with recipients `accounts` with ownerships `percentAllocations` and a keeper fee for splitting of `splitterFee`\"},\"splitBalanceFor(address,address[],uint32[],uint32)\":{\"notice\":\"Splits the eth balance for split `split`\"},\"splitERC20BalanceFor(address,address,address[],uint32[],uint32)\":{\"notice\":\"Splits the ERC20 `token` balance for split `split`\"},\"transferOwnership(address,address)\":{\"notice\":\"Begins transfer of the controlling address of mutable split `split` to `newOwner`\"},\"updateSplit(address,address[],uint32[],uint32)\":{\"notice\":\"Updates an existing split with recipients `accounts` with ownerships `percentAllocations` and a keeper fee for splitting of `splitterFee`\"},\"walletImplementation()\":{\"notice\":\"address of wallet implementation for split proxies\"},\"withdrawFor(address,bool,address[])\":{\"notice\":\"Withdraw eth &/ ERC20 balances for account `account`\"}},\"notice\":\"A composable and gas-efficient protocol for deploying splitter contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/0xSplits/SplitMain.sol\":\"SplitMain\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x698cdbf614109fafc2bf00057b60715fa3aba9dad447c42f4f8b749ae16ce84f\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\nlibrary SafeTransferLib {\\n    /*///////////////////////////////////////////////////////////////\\n                            ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 100 because the calldata length is 4 + 32 * 3.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\\n        assembly {\\n            // Get how many bytes the call returned.\\n            let returnDataSize := returndatasize()\\n\\n            // If the call reverted:\\n            if iszero(callStatus) {\\n                // Copy the revert message into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Revert with the same message.\\n                revert(0, returnDataSize)\\n            }\\n\\n            switch returnDataSize\\n            case 32 {\\n                // Copy the return data into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Set success to whether it returned true.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            case 0 {\\n                // There was no return data.\\n                success := 1\\n            }\\n            default {\\n                // It returned some malformed input.\\n                success := 0\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcc39d0f5693925ea1e8c517f7cc24211a9899c83a57e62d806180cdb056b6b75\",\"license\":\"AGPL-3.0-only\"},\"contracts/0xSplits/SplitMain.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.7;\\n\\nimport {ISplitMain} from './interfaces/ISplitMain.sol';\\nimport {SplitWallet} from './SplitWallet.sol';\\nimport {Clones} from './libraries/Clones.sol';\\nimport {ERC20} from '@rari-capital/solmate/src/tokens/ERC20.sol';\\nimport {SafeTransferLib} from '@rari-capital/solmate/src/utils/SafeTransferLib.sol';\\n\\n/**\\n * ERRORS\\n */\\n\\n/// @notice Unauthorized sender `sender`\\nerror Unauthorized(address sender);\\n/// @notice Invalid number of accounts `accountsLength`, must have at least 2\\nerror InvalidSplit__TooFewAccounts(uint256 accountsLength);\\n/// @notice Array lengths of accounts & percentAllocations don't match (`accountsLength` != `allocationsLength`)\\nerror InvalidSplit__AccountsAndAllocationsMismatch(uint256 accountsLength, uint256 allocationsLength);\\n/// @notice Invalid percentAllocations sum `allocationsSum` must equal `PERCENTAGE_SCALE`\\nerror InvalidSplit__InvalidAllocationsSum(uint32 allocationsSum);\\n/// @notice Invalid accounts ordering at `index`\\nerror InvalidSplit__AccountsOutOfOrder(uint256 index);\\n/// @notice Invalid percentAllocation of zero at `index`\\nerror InvalidSplit__AllocationMustBePositive(uint256 index);\\n/// @notice Invalid splitterFee `splitterFee` cannot be greater than 10% (1e5)\\nerror InvalidSplit__InvalidSplitterFee(uint32 splitterFee);\\n/// @notice Invalid hash `hash` from split data (accounts, percentAllocations, splitterFee)\\nerror InvalidSplit__InvalidHash(bytes32 hash);\\n/// @notice Invalid new controlling address `newOwner` for mutable split\\nerror InvalidNewOwner(address newOwner);\\n/// @notice ETH withdrawal of `amount` failed\\nerror ETHWithdrawalFailed(uint256 amount);\\n/// @notice ERC20 withdrawal of `amount` of `token` failed\\nerror ERC20WithdrawalFailed(ERC20 token, uint256 amount);\\n\\n/**\\n * @title SplitMain\\n * @author 0xSplits\\n * @notice A composable and gas-efficient protocol for deploying splitter contracts.\\n * @dev Split recipients, ownerships, and keeper fees are stored onchain as calldata & re-passed as args / validated\\n * via hashing when needed. Each split gets its own address & proxy for maximum composability with other contracts onchain.\\n * For these proxies, we extended EIP-1167 Minimal Proxy Contract to avoid `DELEGATECALL` for `receive()` to accept\\n * hard gas-capped `sends` & `transfers`.\\n */\\ncontract SplitMain is ISplitMain {\\n    using SafeTransferLib for ERC20;\\n\\n    /**\\n     * STRUCTS\\n     */\\n\\n    /// @notice holds Split metadata\\n    struct Split {\\n        bytes32 hash;\\n        address owner;\\n        address newPotentialOwner;\\n    }\\n\\n    /**\\n     * STORAGE\\n     */\\n\\n    /**\\n     * STORAGE - CONSTANTS & IMMUTABLES\\n     */\\n\\n    /// @notice constant to scale uints into percentages (1e6 == 100%)\\n    uint256 public constant PERCENTAGE_SCALE = 1e6;\\n    /// @notice maximum splitter fee; 1e5 = 10% * PERCENTAGE_SCALE\\n    uint256 internal constant MAX_SPLITTER_FEE = 1e5;\\n    /// @notice address of wallet implementation for split proxies\\n    address public immutable override walletImplementation;\\n\\n    /**\\n     * STORAGE - VARIABLES - PRIVATE & INTERNAL\\n     */\\n\\n    /// @notice mapping to account ETH balances\\n    mapping(address => uint256) internal ethBalances;\\n    /// @notice mapping to account ERC20 balances\\n    mapping(ERC20 => mapping(address => uint256)) internal erc20Balances;\\n    /// @notice mapping to Split metadata\\n    mapping(address => Split) internal splits;\\n\\n    /**\\n     * MODIFIERS\\n     */\\n\\n    /** @notice Reverts if the sender doesn't own the split `split`\\n     *  @param split Address to check for ownership\\n     */\\n    modifier onlySplitOwner(address split) {\\n        if (msg.sender != splits[split].owner) revert Unauthorized(msg.sender);\\n        _;\\n    }\\n\\n    /** @notice Reverts if the sender isn't the new potential owner of split `split`\\n     *  @param split Address to check for new potential ownership\\n     */\\n    modifier onlySplitNewPotentialOwner(address split) {\\n        if (msg.sender != splits[split].newPotentialOwner) revert Unauthorized(msg.sender);\\n        _;\\n    }\\n\\n    /** @notice Reverts if the split with owners represented by `accounts` and `percentAllocations` is malformed\\n     *  @param accounts Ordered, unique list of addresses with ownership in the split\\n     *  @param percentAllocations Percent allocations associated with each address\\n     *  @param splitterFee Keeper fee paid by split to cover gas costs of distribution\\n     */\\n    modifier validSplit(\\n        address[] memory accounts,\\n        uint32[] memory percentAllocations,\\n        uint32 splitterFee\\n    ) {\\n        if (accounts.length < 2) revert InvalidSplit__TooFewAccounts(accounts.length);\\n        if (accounts.length != percentAllocations.length)\\n            revert InvalidSplit__AccountsAndAllocationsMismatch(accounts.length, percentAllocations.length);\\n        if (getSum(percentAllocations) != PERCENTAGE_SCALE)\\n            revert InvalidSplit__InvalidAllocationsSum(getSum(percentAllocations));\\n        // overflows should be impossible in for-loop & array access math\\n        unchecked {\\n            for (uint256 i; i < accounts.length - 1; i++) {\\n                if (accounts[i] >= accounts[i + 1]) revert InvalidSplit__AccountsOutOfOrder(i);\\n                if (percentAllocations[i] == uint32(0)) revert InvalidSplit__AllocationMustBePositive(i);\\n            }\\n            if (percentAllocations[accounts.length - 1] == uint32(0))\\n                revert InvalidSplit__AllocationMustBePositive(accounts.length - 1);\\n        }\\n        if (splitterFee > MAX_SPLITTER_FEE) revert InvalidSplit__InvalidSplitterFee(splitterFee);\\n        _;\\n    }\\n\\n    /** @notice Reverts if `newOwner` is the zero address\\n     *  @param newOwner Proposed new controlling address\\n     */\\n    modifier validNewOwner(address newOwner) {\\n        if (newOwner == address(0)) revert InvalidNewOwner(newOwner);\\n        _;\\n    }\\n\\n    /**\\n     * CONSTRUCTOR\\n     */\\n\\n    constructor() {\\n        walletImplementation = address(new SplitWallet());\\n    }\\n\\n    /**\\n     * FUNCTIONS\\n     */\\n\\n    /**\\n     * FUNCTIONS - PUBLIC & EXTERNAL\\n     */\\n\\n    /** @notice Receive eth\\n     *  @dev Used by `SplitProxy` in `splitBalanceFor` to transfer ETH to `SplitMain`\\n     */\\n    receive() external payable {}\\n\\n    /** @notice Creates a new split with recipients `accounts` with ownerships `percentAllocations`, a keeper fee for splitting of `splitterFee` and the controlling address `owner`\\n     *  @param accounts Ordered, unique list of addresses with ownership in the split\\n     *  @param percentAllocations Percent allocations associated with each address\\n     *  @param splitterFee Keeper fee paid by split to cover gas costs of distribution\\n     *  @param owner Controlling address (0x0 if immutable)\\n     */\\n    function createSplit(\\n        address[] calldata accounts,\\n        uint32[] calldata percentAllocations,\\n        uint32 splitterFee,\\n        address owner\\n    ) external override validSplit(accounts, percentAllocations, splitterFee) returns (address split) {\\n        bytes32 splitHash = hashSplit(accounts, percentAllocations, splitterFee);\\n        if (owner == address(0)) {\\n            // create immutable split\\n            split = Clones.cloneDeterministic(walletImplementation, splitHash);\\n        } else {\\n            // create mutable split\\n            split = Clones.clone(walletImplementation);\\n            splits[split].owner = owner;\\n        }\\n        // store split's hash in storage for future verification\\n        splits[split].hash = splitHash;\\n        emit CreateSplit(split);\\n    }\\n\\n    /** @notice Predicts the address for an immutable split created with recipients `accounts` with ownerships `percentAllocations` and a keeper fee for splitting of `splitterFee`\\n     *  @param accounts Ordered, unique list of addresses with ownership in the split\\n     *  @param percentAllocations Percent allocations associated with each address\\n     *  @param splitterFee Keeper fee paid by split to cover gas costs of distribution\\n     */\\n    function predictSplitAddress(\\n        address[] calldata accounts,\\n        uint32[] calldata percentAllocations,\\n        uint32 splitterFee\\n    ) external view override validSplit(accounts, percentAllocations, splitterFee) returns (address split) {\\n        bytes32 splitHash = hashSplit(accounts, percentAllocations, splitterFee);\\n        split = Clones.predictDeterministicAddress(walletImplementation, splitHash);\\n    }\\n\\n    /** @notice Updates an existing split with recipients `accounts` with ownerships `percentAllocations` and a keeper fee for splitting of `splitterFee`\\n     *  @param accounts Ordered, unique list of addresses with ownership in the split\\n     *  @param percentAllocations Percent allocations associated with each address\\n     *  @param splitterFee Keeper fee paid by split to cover gas costs of distribution\\n     */\\n    function updateSplit(\\n        address split,\\n        address[] calldata accounts,\\n        uint32[] calldata percentAllocations,\\n        uint32 splitterFee\\n    ) external override onlySplitOwner(split) validSplit(accounts, percentAllocations, splitterFee) {\\n        bytes32 splitHash = hashSplit(accounts, percentAllocations, splitterFee);\\n        // store new hash in storage for future verification\\n        splits[split].hash = splitHash;\\n        emit UpdateSplit(split);\\n    }\\n\\n    /** @notice Begins transfer of the controlling address of mutable split `split` to `newOwner`\\n     *  @dev Two-step ownership transfer inspired by [dharma](https://github.com/dharma-eng/dharma-smart-wallet/blob/master/contracts/helpers/TwoStepOwnable.sol)\\n     *  @param split Address of mutable split to transfer control for\\n     *  @param newOwner Address to begin transferring control to\\n     */\\n    function transferOwnership(address split, address newOwner)\\n        external\\n        override\\n        onlySplitOwner(split)\\n        validNewOwner(newOwner)\\n    {\\n        splits[split].newPotentialOwner = newOwner;\\n        // TODO: emit an event?\\n    }\\n\\n    /** @notice Cancels transfer of the controlling address of mutable split `split`\\n     *  @param split Address of mutable split to cancel ownership transfer for\\n     */\\n    function cancelOwnershipTransfer(address split) external override onlySplitOwner(split) {\\n        delete splits[split].newPotentialOwner;\\n        // TODO: emit an event?\\n    }\\n\\n    /** @notice Accepts transfer of the controlling address of mutable split `split`\\n     *  @param split Address of mutable split to accept ownership transfer for\\n     */\\n    function acceptOwnership(address split) external override onlySplitNewPotentialOwner(split) {\\n        delete splits[split].newPotentialOwner;\\n        emit OwnershipTransfer(split, splits[split].owner, msg.sender);\\n        splits[split].owner = msg.sender;\\n    }\\n\\n    /** @notice Turns mutable split `split` immutable\\n     *  @param split Address of mutable split to turn immutable\\n     */\\n    function makeSplitImmutable(address split) external override onlySplitOwner(split) {\\n        delete splits[split].newPotentialOwner;\\n        emit OwnershipTransfer(split, splits[split].owner, address(0));\\n        splits[split].owner = address(0);\\n    }\\n\\n    /** @notice Splits the eth balance for split `split`\\n     *  @dev `accounts`, `percentAllocations`, and `splitterFee` are verified by hashing & comparing to the hash in storage associated with split `split`\\n     *  @param split Address of split to split balance for\\n     *  @param accounts Ordered, unique list of addresses with ownership in the split\\n     *  @param percentAllocations Percent allocations associated with each address\\n     *  @param splitterFee Keeper fee paid by split to cover gas costs of distribution\\n     */\\n    function splitBalanceFor(\\n        address split,\\n        address[] memory accounts,\\n        uint32[] memory percentAllocations,\\n        uint32 splitterFee\\n    ) external override validSplit(accounts, percentAllocations, splitterFee) {\\n        // checks the hash from `accounts`, `percentAllocations`, and `splitterFee` against the hash stored for `split`\\n        bytes32 hash = hashSplit(accounts, percentAllocations, splitterFee);\\n        if (splits[split].hash != hash) revert InvalidSplit__InvalidHash(hash);\\n        // flush proxy funds to SplitMain before splitting\\n        uint256 proxyBalance = split.balance;\\n        if (proxyBalance > 0) SplitWallet(split).sendETHToMain(proxyBalance);\\n        // leave balance of 1 for gas efficiency\\n        uint256 amountToSplit = ethBalances[split] + proxyBalance - 1;\\n        // leave balance of 1 for gas efficiency\\n        ethBalances[split] = 1;\\n        // TODO: add [indexed] msg.sender, splitterFeeAmount as args?\\n        emit SplitBalance(split, amountToSplit);\\n        // given `amountToSplit`, calculate keeper fee\\n        uint256 splitterFeeAmount = scaleAmountByPercentage(amountToSplit, splitterFee);\\n        // credit keeper with fee\\n        ethBalances[msg.sender] += splitterFeeAmount;\\n        // given keeper fee, calculate how much to distribute to split recipients\\n        uint256 amountToSplitPostFee = amountToSplit - splitterFeeAmount;\\n        // distribute remaining split balance\\n        // TODO: confirm safe\\n        // overflows should be impossible in for-loop and with validSplit percentAllocations\\n        unchecked {\\n            for (uint256 i; i < accounts.length; i++) {\\n                ethBalances[accounts[i]] += scaleAmountByPercentage(amountToSplitPostFee, percentAllocations[i]);\\n            }\\n        }\\n    }\\n\\n    /** @notice Splits the ERC20 `token` balance for split `split`\\n     *  @dev `accounts`, `percentAllocations`, and `splitterFee` are verified by hashing & comparing to the hash in storage associated with split `split`\\n     *  @param split Address of split to split balance for\\n     *  @param token Address of ERC20 to split balance for\\n     *  @param accounts Ordered, unique list of addresses with ownership in the split\\n     *  @param percentAllocations Percent allocations associated with each address\\n     *  @param splitterFee Keeper fee paid by split to cover gas costs of distribution\\n     */\\n    function splitERC20BalanceFor(\\n        address split,\\n        ERC20 token,\\n        address[] memory accounts,\\n        uint32[] memory percentAllocations,\\n        uint32 splitterFee\\n    ) external override validSplit(accounts, percentAllocations, splitterFee) {\\n        // checks the hash from `accounts`, `percentAllocations`, and `splitterFee` against the hash stored for `split`\\n        bytes32 hash = hashSplit(accounts, percentAllocations, splitterFee);\\n        if (splits[split].hash != hash) revert InvalidSplit__InvalidHash(hash);\\n        uint256 amountToSplit;\\n        // flush proxy funds to SplitMain before splitting\\n        uint256 proxyBalance = token.balanceOf(split);\\n        if (proxyBalance > 1) {\\n            // leave balance of 1 in ERC20 for gas efficiency\\n            proxyBalance -= 1;\\n            SplitWallet(split).sendERC20ToMain(token, proxyBalance);\\n            // leave balances of 1 in SplitMain for gas efficiency\\n            amountToSplit = erc20Balances[token][split] + proxyBalance - 1;\\n        } else {\\n            // leave balances of 1 in SplitMain for gas efficiency\\n            amountToSplit = erc20Balances[token][split] - 1;\\n        }\\n        // leave balance of 1 for gas efficiency\\n        erc20Balances[token][split] = 1;\\n        // TODO: add [indexed] msg.sender, splitterFeeAmount as args?\\n        emit SplitERC20Balance(split, token, amountToSplit);\\n        // given `amountToSplit`, calculate keeper fee\\n        uint256 splitterFeeAmount = scaleAmountByPercentage(amountToSplit, splitterFee);\\n        // credit keeper with fee\\n        erc20Balances[token][msg.sender] += splitterFeeAmount;\\n        // given keeper fee, calculate how much to distribute to split recipients\\n        uint256 amountToSplitPostFee = amountToSplit - splitterFeeAmount;\\n        // distribute remaining split balance\\n        // TODO: confirm safe\\n        // overflows should be impossible in for-loop and with validSplit percentAllocations\\n        unchecked {\\n            for (uint256 i; i < accounts.length; i++) {\\n                erc20Balances[token][accounts[i]] += scaleAmountByPercentage(\\n                    amountToSplitPostFee,\\n                    percentAllocations[i]\\n                );\\n            }\\n        }\\n    }\\n\\n    /** @notice Withdraw eth &/ ERC20 balances for account `account`\\n     *  @param eth Bool of whether to withdraw eth\\n     *  @param tokens Addresses of ERC20s to withdraw for\\n     */\\n    function withdrawFor(\\n        address account,\\n        bool eth,\\n        ERC20[] calldata tokens\\n    ) external override {\\n        uint256 ethUint = eth ? 1 : 0;\\n        uint256[] memory withdrawnAmounts = new uint256[](ethUint + tokens.length);\\n        if (eth) {\\n            withdrawnAmounts[0] = _withdrawFor(account);\\n        }\\n        // overflows should be impossible in for-loop\\n        unchecked {\\n            for (uint256 i; i < tokens.length; i++) {\\n                withdrawnAmounts[ethUint + i] = _withdrawERC20For(account, tokens[i]);\\n            }\\n        }\\n        emit Withdrawal(account, eth, tokens, withdrawnAmounts);\\n    }\\n\\n    /**\\n     * FUNCTIONS - VIEWS\\n     */\\n\\n    /** @notice Returns the current hash of split `split`\\n     *  @param split Split to return hash for\\n     */\\n    function getHash(address split) external view returns (bytes32) {\\n        return splits[split].hash;\\n    }\\n\\n    /** @notice Returns the current owner of split `split`\\n     *  @param split Split to return owner for\\n     */\\n    function getOwner(address split) external view returns (address) {\\n        return splits[split].owner;\\n    }\\n\\n    /** @notice Returns the current newPotentialOwner of split `split`\\n     *  @param split Split to return newPotentialOwner for\\n     */\\n    function getNewPotentialOwner(address split) external view returns (address) {\\n        return splits[split].newPotentialOwner;\\n    }\\n\\n    /** @notice Returns the current eth balance of split `split`\\n     *  @param split Split to return eth balance for\\n     */\\n    function getETHBalance(address split) external view returns (uint256) {\\n        return ethBalances[split];\\n    }\\n\\n    /** @notice Returns the current erc20Balance of split `split` and erc20 token `token`\\n     *  @param split Split to return balance for\\n     *  @param token Token to return balance for\\n     */\\n    function getERC20Balance(address split, ERC20 token) external view returns (uint256) {\\n        return erc20Balances[token][split];\\n    }\\n\\n    /**\\n     * FUNCTIONS - PRIVATE & INTERNAL\\n     */\\n\\n    /** @notice Sums array of uint32s\\n     *  @param numbers Array of uint32s to sum\\n     *  @return sum Sum of `numbers`.\\n     */\\n    function getSum(uint32[] memory numbers) internal pure returns (uint32 sum) {\\n        for (uint256 i; i < numbers.length; ) {\\n            sum += numbers[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /** @notice Hashes a split\\n     *  @param accounts Ordered, unique list of addresses with ownership in the split\\n     *  @param percentAllocations Percent allocations associated with each address\\n     *  @param splitterFee Keeper fee paid by split to cover gas costs of distribution\\n     *  @return computedHash Hash of the split.\\n     */\\n    function hashSplit(\\n        address[] memory accounts,\\n        uint32[] memory percentAllocations,\\n        uint32 splitterFee\\n    ) internal pure returns (bytes32 computedHash) {\\n        bytes32 accountsHash = keccak256(abi.encodePacked(accounts));\\n        bytes32 percentAllocationsHash = keccak256(abi.encodePacked(percentAllocations));\\n        computedHash = keccak256(abi.encodePacked(accountsHash, percentAllocationsHash, splitterFee));\\n    }\\n\\n    /** @notice Multiplies an amount by a scaled percentage\\n     *  @param amount Amount to get `scaledPercentage` of\\n     *  @param scaledPercent Percent scaled by PERCENTAGE_SCALE\\n     *  @return scaledAmount Percent of `amount`.\\n     */\\n    function scaleAmountByPercentage(uint256 amount, uint256 scaledPercent)\\n        internal\\n        pure\\n        returns (uint256 scaledAmount)\\n    {\\n        // TODO: confirm safe\\n        // use assembly to bypass checking for overflow & division by 0\\n        // (percentages are pre-validated & PERCENTAGE_SCALE will never be 0)\\n        assembly {\\n            /* eg (100 * 2*1e4) / (1e6) */\\n            scaledAmount := div(mul(amount, scaledPercent), PERCENTAGE_SCALE)\\n        }\\n    }\\n\\n    /** @notice Withdraw eth for account\\n     *  @param account Account to withdrawn eth for\\n     *  @return withdrawn Amount of eth withdrawn.\\n     */\\n    function _withdrawFor(address account) internal returns (uint256 withdrawn) {\\n        // leave balance of 1 for gas efficiency\\n        withdrawn = ethBalances[account] - 1;\\n        ethBalances[account] = 1;\\n        (bool success, ) = account.call{value: withdrawn}('');\\n        if (!success) revert ETHWithdrawalFailed(withdrawn);\\n    }\\n\\n    /** @notice Withdraw eth for account\\n     *  @param account Account to withdrawn eth for\\n     *  @return withdrawn Amount of eth withdrawn.\\n     */\\n    function _withdrawERC20For(address account, ERC20 token) internal returns (uint256 withdrawn) {\\n        // leave balance of 1 for gas efficiency\\n        withdrawn = erc20Balances[token][account] - 1;\\n        erc20Balances[token][account] = 1;\\n        token.safeTransfer(account, withdrawn);\\n    }\\n}\\n\",\"keccak256\":\"0xbb63b378fc2f9753a0aba33759f8e090e1cdb36ac18640318b5f51979b1d1c45\",\"license\":\"GPL-3.0-or-later\"},\"contracts/0xSplits/SplitWallet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.7;\\n\\nimport {ISplitMain} from './interfaces/ISplitMain.sol';\\nimport {ERC20} from '@rari-capital/solmate/src/tokens/ERC20.sol';\\nimport {SafeTransferLib} from '@rari-capital/solmate/src/utils/SafeTransferLib.sol';\\n\\n/**\\n * ERRORS\\n */\\n\\n/// @notice Unauthorized sender\\nerror Unauthorized();\\n\\n/**\\n * @title SplitWallet\\n * @author 0xSplits\\n * @notice The implementation logic for `SplitProxy`.\\n * @dev `SplitProxy` handles `receive()` itself to avoid the gas cost with `DELEGATECALL`.\\n */\\ncontract SplitWallet {\\n    using SafeTransferLib for ERC20;\\n\\n    /**\\n     * EVENTS\\n     */\\n\\n    /** @notice emitted after each successful ETH transfer to proxy\\n     *  @param split Address of the split that received ETH\\n     *  @param amount Amount of ETH received\\n     */\\n    event ReceiveETH(address indexed split, uint256 amount);\\n\\n    /**\\n     * STORAGE\\n     */\\n\\n    /**\\n     * STORAGE - CONSTANTS & IMMUTABLES\\n     */\\n\\n    /// @notice address of SplitMain for split distributions & EOA/SC withdrawals\\n    ISplitMain public immutable splitMain;\\n\\n    /**\\n     * MODIFIERS\\n     */\\n\\n    /// @notice Reverts if the sender isn't SplitMain\\n    modifier onlySplitMain() {\\n        if (msg.sender != address(splitMain)) revert Unauthorized();\\n        _;\\n    }\\n\\n    /**\\n     * CONSTRUCTOR\\n     */\\n\\n    constructor() {\\n        splitMain = ISplitMain(msg.sender);\\n    }\\n\\n    /**\\n     * FUNCTIONS - PUBLIC & EXTERNAL\\n     */\\n\\n    /** @notice Sends eth in proxy to SplitMain\\n     *  @param amount Amount to send\\n     */\\n    function sendETHToMain(uint256 amount) external payable onlySplitMain {\\n        // can discard return value for SplitMain\\n        bool success;\\n        (success, ) = address(splitMain).call{value: amount}('');\\n    }\\n\\n    /** @notice Sends erc20 in proxy to SplitMain\\n     *  @param token Token to send\\n     *  @param amount Amount to send\\n     */\\n    function sendERC20ToMain(ERC20 token, uint256 amount) external payable onlySplitMain {\\n        token.safeTransfer(address(splitMain), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x3c843a4e2f221525013b9af2d28090f853383c9cf1eedf05cacbc930703f015c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/0xSplits/interfaces/ISplitMain.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.7;\\n\\nimport {ERC20} from '@rari-capital/solmate/src/tokens/ERC20.sol';\\n\\n/**\\n * @title ISplitMain\\n * @author 0xSplits\\n */\\ninterface ISplitMain {\\n    /**\\n     * FUNCTIONS\\n     */\\n\\n    function walletImplementation() external returns (address);\\n\\n    function createSplit(\\n        address[] calldata accounts,\\n        uint32[] calldata percentAllocations,\\n        uint32 splitterFee,\\n        address owner\\n    ) external returns (address);\\n\\n    function predictSplitAddress(\\n        address[] calldata accounts,\\n        uint32[] calldata percentAllocations,\\n        uint32 splitterFee\\n    ) external view returns (address);\\n\\n    function updateSplit(\\n        address split,\\n        address[] calldata accounts,\\n        uint32[] calldata percentAllocations,\\n        uint32 splitterFee\\n    ) external;\\n\\n    function transferOwnership(address split, address newOwner) external;\\n\\n    function cancelOwnershipTransfer(address split) external;\\n\\n    function acceptOwnership(address split) external;\\n\\n    function makeSplitImmutable(address split) external;\\n\\n    function splitBalanceFor(\\n        address split,\\n        address[] calldata accounts,\\n        uint32[] calldata percentAllocations,\\n        uint32 splitterFee\\n    ) external;\\n\\n    function splitERC20BalanceFor(\\n        address split,\\n        ERC20 token,\\n        address[] calldata accounts,\\n        uint32[] calldata percentAllocations,\\n        uint32 splitterFee\\n    ) external;\\n\\n    function withdrawFor(\\n        address account,\\n        bool eth,\\n        ERC20[] calldata tokens\\n    ) external;\\n\\n    /**\\n     * EVENTS\\n     */\\n\\n    /** @notice emitted after each successful split creation\\n     *  @param split Address of the created split\\n     */\\n    event CreateSplit(address indexed split);\\n    /** @notice emitted after each successful split update\\n     *  @param split Address of the updated split\\n     */\\n    event UpdateSplit(address indexed split);\\n    /** @notice emitted after each successful split ownership transfer\\n     *  @param split Address of the split ownership was transferred for\\n     *  @param previousOwner Address of the split's previous owner\\n     *  @param newOwner Address of the split's new owner\\n     */\\n    event OwnershipTransfer(address indexed split, address indexed previousOwner, address indexed newOwner);\\n\\n    /** @notice emitted after each successful ETH balance split\\n     *  @param split Address of the split that distributed its balance\\n     *  @param amount Amount of ETH distributed\\n     */\\n    event SplitBalance(address indexed split, uint256 amount);\\n    /** @notice emitted after each successful ERC20 balance split\\n     *  @param split Address of the split that distributed its balance\\n     *  @param token Address of ERC20 distributed\\n     *  @param amount Amount of ERC20 distributed\\n     */\\n    event SplitERC20Balance(address indexed split, ERC20 token, uint256 amount);\\n\\n    /** @notice emitted after each successful withdrawal\\n     *  @param account Address that funds were withdrawn to\\n     *  @param eth Boolean for whether ETH was distributed\\n     *  @param tokens Addresses of ERC20s distributed\\n     *  @param amounts Amounts of ETH/ERC20 distributed (if ETH was distributed (`eth`),\\n     *  will be first in the array Remaining array matches order of `tokens`)\\n     */\\n    event Withdrawal(address indexed account, bool eth, ERC20[] tokens, uint256[] amounts);\\n}\\n\",\"keccak256\":\"0x9a78dcb57d72ebff5e68bdd29f5766a8ba50f18ebe7df72d9e5d1f3be5d670a9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/0xSplits/libraries/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.7;\\n\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`\\n     * except when someone calls `receive()` and then it emits an event matching\\n     * `SplitWallet.ReceiveETH(indexed address, amount)`\\n     * Inspired by OZ & 0age's minimal clone implementations based on eip 1167 found at\\n     * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.3.0/contracts/proxy/Clones.sol\\n     * and https://medium.com/coinmonks/the-more-minimal-proxy-5756ae08ee48\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     *\\n     * init: 0x3d605d80600a3d3981f3\\n     * 3d   returndatasize  0\\n     * 605d push1 0x5d      0x5d 0\\n     * 80   dup1            0x5d 0x5d 0\\n     * 600a push1 0x0a      0x0a 0x5d 0x5d 0\\n     * 3d   returndatasize  0 0x0a 0x5d 0x5d 0\\n     * 39   codecopy        0x5d 0                      destOffset offset length     memory[destOffset:destOffset+length] = address(this).code[offset:offset+length]       copy executing contracts bytecode\\n     * 81   dup2            0 0x5d 0\\n     * f3   return          0                           offset length                return memory[offset:offset+length]                                                   returns from this contract call\\n     *\\n     * contract: 0x36603057343d52307f830d2d700a97af574b186c80d40429385d24241565b08a7c559ba283a964d9b160203da23d3df35b3d3d3d3d363d3d37363d73bebebebebebebebebebebebebebebebebebebebe5af43d3d93803e606157fd5bf3\\n     *     0x000     36       calldatasize      cds\\n     *     0x001     6030     push1 0x30        0x30 cds\\n     * ,=< 0x003     57       jumpi\\n     * |   0x004     34       callvalue         cv\\n     * |   0x005     3d       returndatasize    0 cv\\n     * |   0x006     52       mstore\\n     * |   0x007     30       address           addr\\n     * |   0x008     7f830d.. push32 0x830d..   id addr\\n     * |   0x029     6020     push1 0x20        0x20 id addr\\n     * |   0x02b     3d       returndatasize    0 0x20 id addr\\n     * |   0x02c     a2       log2\\n     * |   0x02d     3d       returndatasize    0\\n     * |   0x02e     3d       returndatasize    0 0\\n     * |   0x02f     f3       return\\n     * `-> 0x030     5b       jumpdest\\n     *     0x031     3d       returndatasize    0\\n     *     0x032     3d       returndatasize    0 0\\n     *     0x033     3d       returndatasize    0 0 0\\n     *     0x034     3d       returndatasize    0 0 0 0\\n     *     0x035     36       calldatasize      cds 0 0 0 0\\n     *     0x036     3d       returndatasize    0 cds 0 0 0 0\\n     *     0x037     3d       returndatasize    0 0 cds 0 0 0 0\\n     *     0x038     37       calldatacopy      0 0 0 0\\n     *     0x039     36       calldatasize      cds 0 0 0 0\\n     *     0x03a     3d       returndatasize    0 cds 0 0 0 0\\n     *     0x03b     73bebe.. push20 0xbebe..   0xbebe 0 cds 0 0 0 0\\n     *     0x050     5a       gas               gas 0xbebe 0 cds 0 0 0 0\\n     *     0x051     f4       delegatecall      suc 0 0\\n     *     0x052     3d       returndatasize    rds suc 0 0\\n     *     0x053     3d       returndatasize    rds rds suc 0 0\\n     *     0x054     93       swap4             0 rds suc 0 rds\\n     *     0x055     80       dup1              0 0 rds suc 0 rds\\n     *     0x056     3e       returndatacopy    suc 0 rds\\n     *     0x057     605b     push1 0x5b        0x5b suc 0 rds\\n     * ,=< 0x059     57       jumpi             0 rds\\n     * |   0x05a     fd       revert\\n     * `-> 0x05b     5b       jumpdest          0 rds\\n     *     0x05c     f3       return\\n     *\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d605d80600a3d3981f336603057343d52307f00000000000000000000000000)\\n            mstore(add(ptr, 0x13), 0x830d2d700a97af574b186c80d40429385d24241565b08a7c559ba283a964d9b1)\\n            mstore(add(ptr, 0x33), 0x60203da23d3df35b3d3d3d3d363d3d37363d7300000000000000000000000000)\\n            mstore(add(ptr, 0x46), shl(0x60, implementation))\\n            mstore(add(ptr, 0x5a), 0x5af43d3d93803e605b57fd5bf300000000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x67)\\n        }\\n        require(instance != address(0), 'ERC1167: create failed');\\n    }\\n\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d605d80600a3d3981f336603057343d52307f00000000000000000000000000)\\n            mstore(add(ptr, 0x13), 0x830d2d700a97af574b186c80d40429385d24241565b08a7c559ba283a964d9b1)\\n            mstore(add(ptr, 0x33), 0x60203da23d3df35b3d3d3d3d363d3d37363d7300000000000000000000000000)\\n            mstore(add(ptr, 0x46), shl(0x60, implementation))\\n            mstore(add(ptr, 0x5a), 0x5af43d3d93803e605b57fd5bf300000000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x67, salt)\\n        }\\n        require(instance != address(0), 'ERC1167: create2 failed');\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d605d80600a3d3981f336603057343d52307f00000000000000000000000000)\\n            mstore(add(ptr, 0x13), 0x830d2d700a97af574b186c80d40429385d24241565b08a7c559ba283a964d9b1)\\n            mstore(add(ptr, 0x33), 0x60203da23d3df35b3d3d3d3d363d3d37363d7300000000000000000000000000)\\n            mstore(add(ptr, 0x46), shl(0x60, implementation))\\n            mstore(add(ptr, 0x5a), 0x5af43d3d93803e605b57fd5bf3ff000000000000000000000000000000000000)\\n            mstore(add(ptr, 0x68), shl(0x60, deployer))\\n            mstore(add(ptr, 0x7c), salt)\\n            mstore(add(ptr, 0x9c), keccak256(ptr, 0x67))\\n            predicted := keccak256(add(ptr, 0x67), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xc0d80b1df79ae5f1804544078be4baad9594cc64f197ba3274ffd5dd3f631efd\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620000209062000054565b604051809103906000f0801580156200003d573d6000803e3d6000fd5b5060601b6001600160601b03191660805262000062565b61038f80620027ba83390190565b60805160601c61272462000096600039600081816102d001528181610a3301528181610a64015261175701526127246000f3fe6080604052600436106101025760003560e01c806376335aef11610095578063b7b9479d11610064578063b7b9479d146102f2578063bd0cf69a1461032f578063c3a8962c1461034f578063ecef0ace1461036f578063fa5441611461038f57600080fd5b806376335aef1461025e5780637993ab4f1461027e5780637b37e5611461029e5780638117abc1146102be57600080fd5b80633f26479e116100d15780633f26479e146101cf57806351710e45146101e65780636d435421146102065780637601f7821461022657600080fd5b806308cb86131461010e578063189cbaa0146101305780631da0b8fc146101505780633bb66a7b1461019957600080fd5b3661010957005b600080fd5b34801561011a57600080fd5b5061012e6101293660046122c0565b6103cb565b005b34801561013c57600080fd5b5061012e61014b366004612151565b610512565b34801561015c57600080fd5b5061018661016b366004612151565b6001600160a01b031660009081526002602052604090205490565b6040519081526020015b60405180910390f35b3480156101a557600080fd5b506101866101b4366004612151565b6001600160a01b031660009081526020819052604090205490565b3480156101db57600080fd5b50610186620f424081565b3480156101f257600080fd5b5061012e610201366004612151565b6105e2565b34801561021257600080fd5b5061012e61022136600461216e565b6106b1565b34801561023257600080fd5b50610246610241366004612439565b610759565b6040516001600160a01b039091168152602001610190565b34801561026a57600080fd5b5061012e610279366004612239565b610b0b565b34801561028a57600080fd5b5061012e61029936600461232a565b610ee4565b3480156102aa57600080fd5b5061012e6102b9366004612151565b611440565b3480156102ca57600080fd5b506102467f000000000000000000000000000000000000000000000000000000000000000081565b3480156102fe57600080fd5b5061024661030d366004612151565b6001600160a01b03908116600090815260026020819052604090912001541690565b34801561033b57600080fd5b5061024661034a3660046123c4565b6114ad565b34801561035b57600080fd5b5061018661036a36600461216e565b61178a565b34801561037b57600080fd5b5061012e61038a3660046121a7565b6117b7565b34801561039b57600080fd5b506102466103aa366004612151565b6001600160a01b039081166000908152600260205260409020600101541690565b6000836103d95760006103dc565b60015b60ff16905060006103ed838361263d565b67ffffffffffffffff811115610405576104056126c0565b60405190808252806020026020018201604052801561042e578160200160208202803683370190505b50905084156104605761044086611aec565b81600081518110610453576104536126aa565b6020026020010181815250505b60005b838110156104c25761049b87868684818110610481576104816126aa565b90506020020160208101906104969190612151565b611b9d565b82828501815181106104af576104af6126aa565b6020908102919091010152600101610463565b50856001600160a01b03167f85a3e6062f44efb182fc495a4d92853e74d45c45ed0e4819ca2242d149291adf868686856040516105029493929190612555565b60405180910390a2505050505050565b6001600160a01b0381811660009081526002602052604090206001015482911633146105585760405163472511eb60e11b81523360048201526024015b60405180910390fd5b6001600160a01b03808316600081815260026020819052604080832091820180546001600160a01b0319169055600190910154905191931691907f9737d23b40a8676cc51895dfc989bc9287c2cd9ff47d22c3eb629e965b2dd2ef908490a4506001600160a01b0316600090815260026020526040902060010180546001600160a01b0319169055565b6001600160a01b038181166000908152600260208190526040909120015482911633146106245760405163472511eb60e11b815233600482015260240161054f565b6001600160a01b03808316600081815260026020819052604080832091820180546001600160a01b0319169055600190910154905133949190911692917f9737d23b40a8676cc51895dfc989bc9287c2cd9ff47d22c3eb629e965b2dd2ef91a4506001600160a01b0316600090815260026020526040902060010180546001600160a01b03191633179055565b6001600160a01b0382811660009081526002602052604090206001015483911633146106f25760405163472511eb60e11b815233600482015260240161054f565b816001600160a01b03811661072557604051630896d9ad60e41b81526001600160a01b038216600482015260240161054f565b50506001600160a01b0391821660009081526002602081905260409091200180546001600160a01b03191691909216179055565b600086868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a028281018201909352898252909350899250889182918501908490808284376000920191909152505083518792506002111590506107ea578251604051630e8c626560e41b815260040161054f91815260200190565b8151835114610819578251825160405163b34f351d60e01b81526004810192909252602482015260440161054f565b620f424061082683611c09565b63ffffffff161461085c5761083a82611c09565b60405163fcc487c160e01b815263ffffffff909116600482015260240161054f565b60005b600184510381101561092757838160010181518110610880576108806126aa565b60200260200101516001600160a01b03168482815181106108a3576108a36126aa565b60200260200101516001600160a01b0316106108d55760405163ac6bd23360e01b81526004810182905260240161054f565b600063ffffffff168382815181106108ef576108ef6126aa565b602002602001015163ffffffff16141561091f57604051630db7e4c760e01b81526004810182905260240161054f565b60010161085f565b50600063ffffffff1682600185510381518110610946576109466126aa565b602002602001015163ffffffff16141561097b576001835103604051630db7e4c760e01b815260040161054f91815260200190565b620186a08163ffffffff1611156109ad576040516319f124a360e31b815263ffffffff8216600482015260240161054f565b6000610a1e8b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d9182918501908490808284376000920191909152508c9250611c45915050565b90506001600160a01b038616610a5f57610a587f000000000000000000000000000000000000000000000000000000000000000082611ce2565b9450610abc565b610a887f0000000000000000000000000000000000000000000000000000000000000000611dc1565b6001600160a01b03818116600090815260026020526040902060010180546001600160a01b03191691891691909117905594505b6001600160a01b038516600081815260026020526040808220849055517f8d5f9943c664a3edaf4d3eb18cc5e2c45a7d2dc5869be33d33bbc0fff9bc25909190a2505050509695505050505050565b828282600283511015610b36578251604051630e8c626560e41b815260040161054f91815260200190565b8151835114610b65578251825160405163b34f351d60e01b81526004810192909252602482015260440161054f565b620f4240610b7283611c09565b63ffffffff1614610b865761083a82611c09565b60005b6001845103811015610c5157838160010181518110610baa57610baa6126aa565b60200260200101516001600160a01b0316848281518110610bcd57610bcd6126aa565b60200260200101516001600160a01b031610610bff5760405163ac6bd23360e01b81526004810182905260240161054f565b600063ffffffff16838281518110610c1957610c196126aa565b602002602001015163ffffffff161415610c4957604051630db7e4c760e01b81526004810182905260240161054f565b600101610b89565b50600063ffffffff1682600185510381518110610c7057610c706126aa565b602002602001015163ffffffff161415610ca5576001835103604051630db7e4c760e01b815260040161054f91815260200190565b620186a08163ffffffff161115610cd7576040516319f124a360e31b815263ffffffff8216600482015260240161054f565b6000610ce4878787611c45565b6001600160a01b0389166000908152600260205260409020549091508114610d225760405163dd5ff45760e01b81526004810182905260240161054f565b6001600160a01b038816318015610d8e57604051632ac3affd60e21b8152600481018290526001600160a01b038a169063ab0ebff490602401600060405180830381600087803b158015610d7557600080fd5b505af1158015610d89573d6000803e3d6000fd5b505050505b6001600160a01b038916600090815260208190526040812054600190610db590849061263d565b610dbf919061267d565b6001600160a01b038b166000818152602081815260409182902060019055905183815292935090917f8493e61d5a8e7dc4eb59f8c695ebf8a62feead65f29affc9e3d81b08f0b8c55b910160405180910390a23360009081526020819052604081208054620f424063ffffffff8b1685020492839291610e4090849061263d565b9091555060009050610e52828461267d565b905060005b8b51811015610ed557610e8e828c8381518110610e7657610e766126aa565b602002602001015163ffffffff16620f424091020490565b6000808e8481518110610ea357610ea36126aa565b6020908102919091018101516001600160a01b0316825281019190915260400160002080549091019055600101610e57565b50505050505050505050505050565b828282600283511015610f0f578251604051630e8c626560e41b815260040161054f91815260200190565b8151835114610f3e578251825160405163b34f351d60e01b81526004810192909252602482015260440161054f565b620f4240610f4b83611c09565b63ffffffff1614610f5f5761083a82611c09565b60005b600184510381101561102a57838160010181518110610f8357610f836126aa565b60200260200101516001600160a01b0316848281518110610fa657610fa66126aa565b60200260200101516001600160a01b031610610fd85760405163ac6bd23360e01b81526004810182905260240161054f565b600063ffffffff16838281518110610ff257610ff26126aa565b602002602001015163ffffffff16141561102257604051630db7e4c760e01b81526004810182905260240161054f565b600101610f62565b50600063ffffffff1682600185510381518110611049576110496126aa565b602002602001015163ffffffff16141561107e576001835103604051630db7e4c760e01b815260040161054f91815260200190565b620186a08163ffffffff1611156110b0576040516319f124a360e31b815263ffffffff8216600482015260240161054f565b60006110bd878787611c45565b6001600160a01b038a1660009081526002602052604090205490915081146110fb5760405163dd5ff45760e01b81526004810182905260240161054f565b6040516370a0823160e01b81526001600160a01b038a8116600483015260009182918b16906370a082319060240160206040518083038186803b15801561114157600080fd5b505afa158015611155573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117991906124cd565b9050600181111561125c5761118f60018261267d565b604051633e0f9fff60e11b81526001600160a01b038c8116600483015260248201839052919250908c1690637c1f3ffe90604401600060405180830381600087803b1580156111dd57600080fd5b505af11580156111f1573d6000803e3d6000fd5b50505050600181600160008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e6001600160a01b03166001600160a01b031681526020019081526020016000205461124b919061263d565b611255919061267d565b91506112b3565b60018060008c6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b03168152602001908152602001600020546112b0919061267d565b91505b60018060008c6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b03168152602001908152602001600020819055508a6001600160a01b03167f2da9d91530de0194f9d25fddb23063e5300e7bbfa8a5576f16021fec91f90c188b8460405161134f9291906001600160a01b03929092168252602082015260400190565b60405180910390a26001600160a01b038a16600090815260016020908152604080832033845290915281208054620f424063ffffffff8b168602049283929161139990849061263d565b90915550600090506113ab828561267d565b905060005b8b51811015611430576113cf828c8381518110610e7657610e766126aa565b6001600160a01b038e1660009081526001602052604081208e519091908f90859081106113fe576113fe6126aa565b6020908102919091018101516001600160a01b03168252810191909152604001600020805490910190556001016113b0565b5050505050505050505050505050565b6001600160a01b0381811660009081526002602052604090206001015482911633146114815760405163472511eb60e11b815233600482015260240161054f565b506001600160a01b031660009081526002602081905260409091200180546001600160a01b0319169055565b60008585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080890282810182019093528882529093508892508791829185019084908082843760009201919091525050835186925060021115905061153e578251604051630e8c626560e41b815260040161054f91815260200190565b815183511461156d578251825160405163b34f351d60e01b81526004810192909252602482015260440161054f565b620f424061157a83611c09565b63ffffffff161461158e5761083a82611c09565b60005b6001845103811015611659578381600101815181106115b2576115b26126aa565b60200260200101516001600160a01b03168482815181106115d5576115d56126aa565b60200260200101516001600160a01b0316106116075760405163ac6bd23360e01b81526004810182905260240161054f565b600063ffffffff16838281518110611621576116216126aa565b602002602001015163ffffffff16141561165157604051630db7e4c760e01b81526004810182905260240161054f565b600101611591565b50600063ffffffff1682600185510381518110611678576116786126aa565b602002602001015163ffffffff1614156116ad576001835103604051630db7e4c760e01b815260040161054f91815260200190565b620186a08163ffffffff1611156116df576040516319f124a360e31b815263ffffffff8216600482015260240161054f565b60006117508a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c9182918501908490808284376000920191909152508b9250611c45915050565b905061177c7f000000000000000000000000000000000000000000000000000000000000000082611e9d565b9a9950505050505050505050565b6001600160a01b038082166000908152600160209081526040808320938616835292905220545b92915050565b6001600160a01b0386811660009081526002602052604090206001015487911633146117f85760405163472511eb60e11b815233600482015260240161054f565b85858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808902828101820190935288825290935088925087918291850190849080828437600092019190915250508351869250600211159050611887578251604051630e8c626560e41b815260040161054f91815260200190565b81518351146118b6578251825160405163b34f351d60e01b81526004810192909252602482015260440161054f565b620f42406118c383611c09565b63ffffffff16146118d75761083a82611c09565b60005b60018451038110156119a2578381600101815181106118fb576118fb6126aa565b60200260200101516001600160a01b031684828151811061191e5761191e6126aa565b60200260200101516001600160a01b0316106119505760405163ac6bd23360e01b81526004810182905260240161054f565b600063ffffffff1683828151811061196a5761196a6126aa565b602002602001015163ffffffff16141561199a57604051630db7e4c760e01b81526004810182905260240161054f565b6001016118da565b50600063ffffffff16826001855103815181106119c1576119c16126aa565b602002602001015163ffffffff1614156119f6576001835103604051630db7e4c760e01b815260040161054f91815260200190565b620186a08163ffffffff161115611a28576040516319f124a360e31b815263ffffffff8216600482015260240161054f565b6000611a998a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c9182918501908490808284376000920191909152508b9250611c45915050565b6001600160a01b038c166000818152600260205260408082208490555192935090917f45e1e99513dd915ac128b94953ca64c6375717ea1894b3114db08cdca51debd29190a25050505050505050505050565b6001600160a01b038116600090815260208190526040812054611b119060019061267d565b6001600160a01b03831660008181526020819052604080822060019055519293509183908381818185875af1925050503d8060008114611b6d576040519150601f19603f3d011682016040523d82523d6000602084013e611b72565b606091505b5050905080611b97576040516372574b8960e11b81526004810183905260240161054f565b50919050565b6001600160a01b0380821660009081526001602081815260408084209487168452939052918120549091611bd09161267d565b6001600160a01b038084166000818152600160208181526040808420958a168452949052929020919091559091506117b1908483611f49565b6000805b8251811015611b9757828181518110611c2857611c286126aa565b602002602001015182611c3b9190612655565b9150600101611c0d565b60008084604051602001611c5991906124e6565b604051602081830303815290604052805190602001209050600084604051602001611c849190612525565b60408051601f1981840301815282825280516020918201209083018590529082018190526001600160e01b031960e087901b166060830152915060640160405160208183030381529060405280519060200120925050509392505050565b6000604051723d605d80600a3d3981f336603057343d52307f60681b81527f830d2d700a97af574b186c80d40429385d24241565b08a7c559ba283a964d9b160138201527260203da23d3df35b3d3d3d3d363d3d37363d7360681b60338201528360601b60468201526c5af43d3d93803e605b57fd5bf360981b605a820152826067826000f59150506001600160a01b0381166117b15760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c6564000000000000000000604482015260640161054f565b6000604051723d605d80600a3d3981f336603057343d52307f60681b81527f830d2d700a97af574b186c80d40429385d24241565b08a7c559ba283a964d9b160138201527260203da23d3df35b3d3d3d3d363d3d37363d7360681b60338201528260601b60468201526c5af43d3d93803e605b57fd5bf360981b605a8201526067816000f09150506001600160a01b038116611e985760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640161054f565b919050565b6000611f42838330604051723d605d80600a3d3981f336603057343d52307f60681b81527f830d2d700a97af574b186c80d40429385d24241565b08a7c559ba283a964d9b160138201527260203da23d3df35b3d3d3d3d363d3d37363d7360681b6033820152606093841b60468201526d5af43d3d93803e605b57fd5bf3ff60901b605a820152921b6068830152607c8201526067808220609c830152605591012090565b9392505050565b600060405163a9059cbb60e01b81526001600160a01b03841660048201528260248201526000806044836000895af1915050611f8481611fc8565b611fc25760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b604482015260640161054f565b50505050565b60003d82611fda57806000803e806000fd5b8060208114611ff25780156120035760009250612008565b816000803e60005115159250612008565b600192505b5050919050565b60008083601f84011261202157600080fd5b50813567ffffffffffffffff81111561203957600080fd5b6020830191508360208260051b850101111561205457600080fd5b9250929050565b600082601f83011261206c57600080fd5b8135602061208161207c83612619565b6125e8565b80838252828201915082860187848660051b89010111156120a157600080fd5b60005b858110156120c95781356120b7816126d6565b845292840192908401906001016120a4565b5090979650505050505050565b600082601f8301126120e757600080fd5b813560206120f761207c83612619565b80838252828201915082860187848660051b890101111561211757600080fd5b60005b858110156120c95761212b8261213d565b8452928401929084019060010161211a565b803563ffffffff81168114611e9857600080fd5b60006020828403121561216357600080fd5b8135611f42816126d6565b6000806040838503121561218157600080fd5b823561218c816126d6565b9150602083013561219c816126d6565b809150509250929050565b600080600080600080608087890312156121c057600080fd5b86356121cb816126d6565b9550602087013567ffffffffffffffff808211156121e857600080fd5b6121f48a838b0161200f565b9097509550604089013591508082111561220d57600080fd5b5061221a89828a0161200f565b909450925061222d90506060880161213d565b90509295509295509295565b6000806000806080858703121561224f57600080fd5b843561225a816126d6565b9350602085013567ffffffffffffffff8082111561227757600080fd5b6122838883890161205b565b9450604087013591508082111561229957600080fd5b506122a6878288016120d6565b9250506122b56060860161213d565b905092959194509250565b600080600080606085870312156122d657600080fd5b84356122e1816126d6565b9350602085013580151581146122f657600080fd5b9250604085013567ffffffffffffffff81111561231257600080fd5b61231e8782880161200f565b95989497509550505050565b600080600080600060a0868803121561234257600080fd5b853561234d816126d6565b9450602086013561235d816126d6565b9350604086013567ffffffffffffffff8082111561237a57600080fd5b61238689838a0161205b565b9450606088013591508082111561239c57600080fd5b506123a9888289016120d6565b9250506123b86080870161213d565b90509295509295909350565b6000806000806000606086880312156123dc57600080fd5b853567ffffffffffffffff808211156123f457600080fd5b61240089838a0161200f565b9097509550602088013591508082111561241957600080fd5b506124268882890161200f565b90945092506123b890506040870161213d565b6000806000806000806080878903121561245257600080fd5b863567ffffffffffffffff8082111561246a57600080fd5b6124768a838b0161200f565b9098509650602089013591508082111561248f57600080fd5b5061249c89828a0161200f565b90955093506124af90506040880161213d565b915060608701356124bf816126d6565b809150509295509295509295565b6000602082840312156124df57600080fd5b5051919050565b815160009082906020808601845b838110156125195781516001600160a01b0316855293820193908201906001016124f4565b50929695505050505050565b815160009082906020808601845b8381101561251957815163ffffffff1685529382019390820190600101612533565b841515815260606020808301829052908201849052600090859060808401835b878110156125a3578335612588816126d6565b6001600160a01b031682529282019290820190600101612575565b508481036040860152855180825290820192508186019060005b818110156125d9578251855293830193918301916001016125bd565b50929998505050505050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612611576126116126c0565b604052919050565b600067ffffffffffffffff821115612633576126336126c0565b5060051b60200190565b6000821982111561265057612650612694565b500190565b600063ffffffff80831681851680830382111561267457612674612694565b01949350505050565b60008282101561268f5761268f612694565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146126eb57600080fd5b5056fea26469706673582212207a40021e1ee167d30151598d1f8d854577f4efdea1a9c225180afdecd00fe6c164736f6c6343000807003360a060405234801561001057600080fd5b5033606081901b60805261034361004c60003960008181604b0152818160bc015281816101080152818161013c015261017d01526103436000f3fe6080604052600436106100345760003560e01c80630e769b2b146100395780637c1f3ffe14610089578063ab0ebff41461009e575b600080fd5b34801561004557600080fd5b5061006d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b61009c6100973660046102bc565b6100b1565b005b61009c6100ac3660046102f4565b610131565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146100f9576040516282b42960e81b815260040160405180910390fd5b61012d6001600160a01b0383167f0000000000000000000000000000000000000000000000000000000000000000836101f2565b5050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610179576040516282b42960e81b815260040160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168260405160006040518083038185875af1925050503d80600081146101e6576040519150601f19603f3d011682016040523d82523d6000602084013e6101eb565b606091505b5050505050565b600060405163a9059cbb60e01b81526001600160a01b03841660048201528260248201526000806044836000895af191505061022d81610275565b61026f5760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b604482015260640160405180910390fd5b50505050565b60003d8261028757806000803e806000fd5b806020811461029f5780156102b057600092506102b5565b816000803e600051151592506102b5565b600192505b5050919050565b600080604083850312156102cf57600080fd5b82356001600160a01b03811681146102e657600080fd5b946020939093013593505050565b60006020828403121561030657600080fd5b503591905056fea2646970667358221220118fb33fe899f339d3464aff84bc3e644b046fd9527954dc5579b3ff8bd81b9b64736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "0xSplits",
    "details": "Split recipients, ownerships, and keeper fees are stored onchain as calldata & re-passed as args / validated via hashing when needed. Each split gets its own address & proxy for maximum composability with other contracts onchain. For these proxies, we extended EIP-1167 Minimal Proxy Contract to avoid `DELEGATECALL` for `receive()` to accept hard gas-capped `sends` & `transfers`.",
    "kind": "dev",
    "methods": {
      "acceptOwnership(address)": {
        "params": {
          "split": "Address of mutable split to accept ownership transfer for"
        }
      },
      "cancelOwnershipTransfer(address)": {
        "params": {
          "split": "Address of mutable split to cancel ownership transfer for"
        }
      },
      "createSplit(address[],uint32[],uint32,address)": {
        "params": {
          "accounts": "Ordered, unique list of addresses with ownership in the split",
          "owner": "Controlling address (0x0 if immutable)",
          "percentAllocations": "Percent allocations associated with each address",
          "splitterFee": "Keeper fee paid by split to cover gas costs of distribution"
        }
      },
      "getERC20Balance(address,address)": {
        "params": {
          "split": "Split to return balance for",
          "token": "Token to return balance for"
        }
      },
      "getETHBalance(address)": {
        "params": {
          "split": "Split to return eth balance for"
        }
      },
      "getHash(address)": {
        "params": {
          "split": "Split to return hash for"
        }
      },
      "getNewPotentialOwner(address)": {
        "params": {
          "split": "Split to return newPotentialOwner for"
        }
      },
      "getOwner(address)": {
        "params": {
          "split": "Split to return owner for"
        }
      },
      "makeSplitImmutable(address)": {
        "params": {
          "split": "Address of mutable split to turn immutable"
        }
      },
      "predictSplitAddress(address[],uint32[],uint32)": {
        "params": {
          "accounts": "Ordered, unique list of addresses with ownership in the split",
          "percentAllocations": "Percent allocations associated with each address",
          "splitterFee": "Keeper fee paid by split to cover gas costs of distribution"
        }
      },
      "splitBalanceFor(address,address[],uint32[],uint32)": {
        "details": "`accounts`, `percentAllocations`, and `splitterFee` are verified by hashing & comparing to the hash in storage associated with split `split`",
        "params": {
          "accounts": "Ordered, unique list of addresses with ownership in the split",
          "percentAllocations": "Percent allocations associated with each address",
          "split": "Address of split to split balance for",
          "splitterFee": "Keeper fee paid by split to cover gas costs of distribution"
        }
      },
      "splitERC20BalanceFor(address,address,address[],uint32[],uint32)": {
        "details": "`accounts`, `percentAllocations`, and `splitterFee` are verified by hashing & comparing to the hash in storage associated with split `split`",
        "params": {
          "accounts": "Ordered, unique list of addresses with ownership in the split",
          "percentAllocations": "Percent allocations associated with each address",
          "split": "Address of split to split balance for",
          "splitterFee": "Keeper fee paid by split to cover gas costs of distribution",
          "token": "Address of ERC20 to split balance for"
        }
      },
      "transferOwnership(address,address)": {
        "details": "Two-step ownership transfer inspired by [dharma](https://github.com/dharma-eng/dharma-smart-wallet/blob/master/contracts/helpers/TwoStepOwnable.sol)",
        "params": {
          "newOwner": "Address to begin transferring control to",
          "split": "Address of mutable split to transfer control for"
        }
      },
      "updateSplit(address,address[],uint32[],uint32)": {
        "params": {
          "accounts": "Ordered, unique list of addresses with ownership in the split",
          "percentAllocations": "Percent allocations associated with each address",
          "splitterFee": "Keeper fee paid by split to cover gas costs of distribution"
        }
      },
      "withdrawFor(address,bool,address[])": {
        "params": {
          "eth": "Bool of whether to withdraw eth",
          "tokens": "Addresses of ERC20s to withdraw for"
        }
      }
    },
    "title": "SplitMain",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ETHWithdrawalFailed(uint256)": [
        {
          "notice": "ETH withdrawal of `amount` failed"
        }
      ],
      "InvalidNewOwner(address)": [
        {
          "notice": "Invalid new controlling address `newOwner` for mutable split"
        }
      ],
      "InvalidSplit__AccountsAndAllocationsMismatch(uint256,uint256)": [
        {
          "notice": "Array lengths of accounts & percentAllocations don't match (`accountsLength` != `allocationsLength`)"
        }
      ],
      "InvalidSplit__AccountsOutOfOrder(uint256)": [
        {
          "notice": "Invalid accounts ordering at `index`"
        }
      ],
      "InvalidSplit__AllocationMustBePositive(uint256)": [
        {
          "notice": "Invalid percentAllocation of zero at `index`"
        }
      ],
      "InvalidSplit__InvalidAllocationsSum(uint32)": [
        {
          "notice": "Invalid percentAllocations sum `allocationsSum` must equal `PERCENTAGE_SCALE`"
        }
      ],
      "InvalidSplit__InvalidHash(bytes32)": [
        {
          "notice": "Invalid hash `hash` from split data (accounts, percentAllocations, splitterFee)"
        }
      ],
      "InvalidSplit__InvalidSplitterFee(uint32)": [
        {
          "notice": "Invalid splitterFee `splitterFee` cannot be greater than 10% (1e5)"
        }
      ],
      "InvalidSplit__TooFewAccounts(uint256)": [
        {
          "notice": "Invalid number of accounts `accountsLength`, must have at least 2"
        }
      ],
      "Unauthorized(address)": [
        {
          "notice": "Unauthorized sender `sender`"
        }
      ]
    },
    "events": {
      "CreateSplit(address)": {
        "notice": "emitted after each successful split creation"
      },
      "OwnershipTransfer(address,address,address)": {
        "notice": "emitted after each successful split ownership transfer"
      },
      "SplitBalance(address,uint256)": {
        "notice": "emitted after each successful ETH balance split"
      },
      "SplitERC20Balance(address,address,uint256)": {
        "notice": "emitted after each successful ERC20 balance split"
      },
      "UpdateSplit(address)": {
        "notice": "emitted after each successful split update"
      },
      "Withdrawal(address,bool,address[],uint256[])": {
        "notice": "emitted after each successful withdrawal"
      }
    },
    "kind": "user",
    "methods": {
      "PERCENTAGE_SCALE()": {
        "notice": "constant to scale uints into percentages (1e6 == 100%)"
      },
      "acceptOwnership(address)": {
        "notice": "Accepts transfer of the controlling address of mutable split `split`"
      },
      "cancelOwnershipTransfer(address)": {
        "notice": "Cancels transfer of the controlling address of mutable split `split`"
      },
      "constructor": {
        "notice": "CONSTRUCTOR"
      },
      "createSplit(address[],uint32[],uint32,address)": {
        "notice": "Creates a new split with recipients `accounts` with ownerships `percentAllocations`, a keeper fee for splitting of `splitterFee` and the controlling address `owner`"
      },
      "getERC20Balance(address,address)": {
        "notice": "Returns the current erc20Balance of split `split` and erc20 token `token`"
      },
      "getETHBalance(address)": {
        "notice": "Returns the current eth balance of split `split`"
      },
      "getHash(address)": {
        "notice": "Returns the current hash of split `split`"
      },
      "getNewPotentialOwner(address)": {
        "notice": "Returns the current newPotentialOwner of split `split`"
      },
      "getOwner(address)": {
        "notice": "Returns the current owner of split `split`"
      },
      "makeSplitImmutable(address)": {
        "notice": "Turns mutable split `split` immutable"
      },
      "predictSplitAddress(address[],uint32[],uint32)": {
        "notice": "Predicts the address for an immutable split created with recipients `accounts` with ownerships `percentAllocations` and a keeper fee for splitting of `splitterFee`"
      },
      "splitBalanceFor(address,address[],uint32[],uint32)": {
        "notice": "Splits the eth balance for split `split`"
      },
      "splitERC20BalanceFor(address,address,address[],uint32[],uint32)": {
        "notice": "Splits the ERC20 `token` balance for split `split`"
      },
      "transferOwnership(address,address)": {
        "notice": "Begins transfer of the controlling address of mutable split `split` to `newOwner`"
      },
      "updateSplit(address,address[],uint32[],uint32)": {
        "notice": "Updates an existing split with recipients `accounts` with ownerships `percentAllocations` and a keeper fee for splitting of `splitterFee`"
      },
      "walletImplementation()": {
        "notice": "address of wallet implementation for split proxies"
      },
      "withdrawFor(address,bool,address[])": {
        "notice": "Withdraw eth &/ ERC20 balances for account `account`"
      }
    },
    "notice": "A composable and gas-efficient protocol for deploying splitter contracts.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 597,
        "contract": "contracts/0xSplits/SplitMain.sol:SplitMain",
        "label": "ethBalances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 605,
        "contract": "contracts/0xSplits/SplitMain.sol:SplitMain",
        "label": "erc20Balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_contract(ERC20)394,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 611,
        "contract": "contracts/0xSplits/SplitMain.sol:SplitMain",
        "label": "splits",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Split)580_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20)394": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Split)580_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SplitMain.Split)",
        "numberOfBytes": "32",
        "value": "t_struct(Split)580_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(ERC20)394,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(ERC20)394",
        "label": "mapping(contract ERC20 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_struct(Split)580_storage": {
        "encoding": "inplace",
        "label": "struct SplitMain.Split",
        "members": [
          {
            "astId": 575,
            "contract": "contracts/0xSplits/SplitMain.sol:SplitMain",
            "label": "hash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 577,
            "contract": "contracts/0xSplits/SplitMain.sol:SplitMain",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 579,
            "contract": "contracts/0xSplits/SplitMain.sol:SplitMain",
            "label": "newPotentialOwner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
