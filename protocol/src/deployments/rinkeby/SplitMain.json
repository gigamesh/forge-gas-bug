{
  "address": "0x2ed6c4B5dA6378c7897AC67Ba9e43102Feb694EE",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Create2Error",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CreateError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newController",
          "type": "address"
        }
      ],
      "name": "InvalidNewController",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "accountsLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocationsLength",
          "type": "uint256"
        }
      ],
      "name": "InvalidSplit__AccountsAndAllocationsMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "InvalidSplit__AccountsOutOfOrder",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "InvalidSplit__AllocationMustBePositive",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "allocationsSum",
          "type": "uint32"
        }
      ],
      "name": "InvalidSplit__InvalidAllocationsSum",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "distributionFee",
          "type": "uint32"
        }
      ],
      "name": "InvalidSplit__InvalidDistributionFee",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "InvalidSplit__InvalidHash",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "accountsLength",
          "type": "uint256"
        }
      ],
      "name": "InvalidSplit__TooFewAccounts",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "split",
          "type": "address"
        }
      ],
      "name": "CancelControlTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "split",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousController",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newController",
          "type": "address"
        }
      ],
      "name": "ControlTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "split",
          "type": "address"
        }
      ],
      "name": "CreateSplit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "split",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract ERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "distributionAddress",
          "type": "address"
        }
      ],
      "name": "DistributeERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "split",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "distributionAddress",
          "type": "address"
        }
      ],
      "name": "DistributeETH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "split",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPotentialController",
          "type": "address"
        }
      ],
      "name": "InitiateControlTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "split",
          "type": "address"
        }
      ],
      "name": "UpdateSplit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "eth",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "contract ERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        }
      ],
      "name": "acceptControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        }
      ],
      "name": "cancelControlTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "percentAllocations",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32",
          "name": "distributionFee",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "createSplit",
      "outputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "percentAllocations",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32",
          "name": "distributionFee",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "distributionAddress",
          "type": "address"
        }
      ],
      "name": "distributeERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "percentAllocations",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32",
          "name": "distributionFee",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "distributionAddress",
          "type": "address"
        }
      ],
      "name": "distributeETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        }
      ],
      "name": "getController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getERC20Balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getETHBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        }
      ],
      "name": "getHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        }
      ],
      "name": "getNewPotentialController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        }
      ],
      "name": "makeSplitImmutable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "percentAllocations",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32",
          "name": "distributionFee",
          "type": "uint32"
        }
      ],
      "name": "predictImmutableSplitAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newController",
          "type": "address"
        }
      ],
      "name": "transferControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "split",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "percentAllocations",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32",
          "name": "distributionFee",
          "type": "uint32"
        }
      ],
      "name": "updateSplit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "walletImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "eth",
          "type": "bool"
        },
        {
          "internalType": "contract ERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf818f662859d66b0338b94a1153e32e6bf52acc1e761026237ca07fe69c47a78",
  "receipt": {
    "to": null,
    "from": "0xB0A36b3CeDf210f37a5E7BC28d4b8E91D4E3C412",
    "contractAddress": "0x2017187697Eba23050d8c3e5f98868Bbe1562E66",
    "transactionIndex": 17,
    "gasUsed": "4423403",
    "logsBloom": "0x
    "blockHash": "0xc11a0e6dd246d3d17cf92754deebf3608aa066c357c815efc0cb2319e120f26e",
    "transactionHash": "0xf818f662859d66b0338b94a1153e32e6bf52acc1e761026237ca07fe69c47a78",
    "logs": [],
    "blockNumber": 10135638,
    "cumulativeGasUsed": "9049942",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0ec70b034b691fe8213612fea7572494",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Create2Error\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CreateError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"InvalidNewController\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accountsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocationsLength\",\"type\":\"uint256\"}],\"name\":\"InvalidSplit__AccountsAndAllocationsMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"InvalidSplit__AccountsOutOfOrder\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"InvalidSplit__AllocationMustBePositive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"allocationsSum\",\"type\":\"uint32\"}],\"name\":\"InvalidSplit__InvalidAllocationsSum\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"distributionFee\",\"type\":\"uint32\"}],\"name\":\"InvalidSplit__InvalidDistributionFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"InvalidSplit__InvalidHash\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accountsLength\",\"type\":\"uint256\"}],\"name\":\"InvalidSplit__TooFewAccounts\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"}],\"name\":\"CancelControlTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousController\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"ControlTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"}],\"name\":\"CreateSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"distributionAddress\",\"type\":\"address\"}],\"name\":\"DistributeERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"distributionAddress\",\"type\":\"address\"}],\"name\":\"DistributeETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPotentialController\",\"type\":\"address\"}],\"name\":\"InitiateControlTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"}],\"name\":\"UpdateSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"eth\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"contract ERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENTAGE_SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"}],\"name\":\"acceptControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"}],\"name\":\"cancelControlTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"percentAllocations\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32\",\"name\":\"distributionFee\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"createSplit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"percentAllocations\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32\",\"name\":\"distributionFee\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"distributionAddress\",\"type\":\"address\"}],\"name\":\"distributeERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"percentAllocations\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32\",\"name\":\"distributionFee\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"distributionAddress\",\"type\":\"address\"}],\"name\":\"distributeETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"}],\"name\":\"getController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getERC20Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"}],\"name\":\"getHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"}],\"name\":\"getNewPotentialController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"}],\"name\":\"makeSplitImmutable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"percentAllocations\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32\",\"name\":\"distributionFee\",\"type\":\"uint32\"}],\"name\":\"predictImmutableSplitAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"transferControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"split\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"percentAllocations\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32\",\"name\":\"distributionFee\",\"type\":\"uint32\"}],\"name\":\"updateSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"eth\",\"type\":\"bool\"},{\"internalType\":\"contract ERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"0xSplits <will@0xSplits.xyz>\",\"details\":\"Split recipients, ownerships, and keeper fees are stored onchain as calldata & re-passed as args / validated via hashing when needed. Each split gets its own address & proxy for maximum composability with other contracts onchain. For these proxies, we extended EIP-1167 Minimal Proxy Contract to avoid `DELEGATECALL` inside `receive()` to accept hard gas-capped `sends` & `transfers`.\",\"errors\":{\"InvalidNewController(address)\":[{\"params\":{\"newController\":\"Invalid new controller\"}}],\"InvalidSplit__AccountsAndAllocationsMismatch(uint256,uint256)\":[{\"params\":{\"accountsLength\":\"Length of accounts array\",\"allocationsLength\":\"Length of percentAllocations array\"}}],\"InvalidSplit__AccountsOutOfOrder(uint256)\":[{\"params\":{\"index\":\"Index of out-of-order account\"}}],\"InvalidSplit__AllocationMustBePositive(uint256)\":[{\"params\":{\"index\":\"Index of zero percentAllocation\"}}],\"InvalidSplit__InvalidAllocationsSum(uint32)\":[{\"params\":{\"allocationsSum\":\"Sum of percentAllocations array\"}}],\"InvalidSplit__InvalidDistributionFee(uint32)\":[{\"params\":{\"distributionFee\":\"Invalid distributionFee amount\"}}],\"InvalidSplit__InvalidHash(bytes32)\":[{\"params\":{\"hash\":\"Invalid hash\"}}],\"InvalidSplit__TooFewAccounts(uint256)\":[{\"params\":{\"accountsLength\":\"Length of accounts array\"}}],\"Unauthorized(address)\":[{\"params\":{\"sender\":\"Transaction sender\"}}]},\"kind\":\"dev\",\"methods\":{\"acceptControl(address)\":{\"params\":{\"split\":\"Address of mutable split to accept control transfer for\"}},\"cancelControlTransfer(address)\":{\"params\":{\"split\":\"Address of mutable split to cancel control transfer for\"}},\"createSplit(address[],uint32[],uint32,address)\":{\"params\":{\"accounts\":\"Ordered, unique list of addresses with ownership in the split\",\"controller\":\"Controlling address (0x0 if immutable)\",\"distributionFee\":\"Keeper fee paid by split to cover gas costs of distribution\",\"percentAllocations\":\"Percent allocations associated with each address\"},\"returns\":{\"split\":\"Address of newly created split\"}},\"distributeERC20(address,address,address[],uint32[],uint32,address)\":{\"details\":\"`accounts`, `percentAllocations`, and `distributionFee` are verified by hashing  & comparing to the hash in storage associated with split `split`pernicious ERC20s may cause overflow in this function inside  _scaleAmountByPercentage, but results do not affect ETH & other ERC20 balances\",\"params\":{\"accounts\":\"Ordered, unique list of addresses with ownership in the split\",\"distributionAddress\":\"Address to pay `distributionFee` to\",\"distributionFee\":\"Keeper fee paid by split to cover gas costs of distribution\",\"percentAllocations\":\"Percent allocations associated with each address\",\"split\":\"Address of split to distribute balance for\",\"token\":\"Address of ERC20 to distribute balance for\"}},\"distributeETH(address,address[],uint32[],uint32,address)\":{\"details\":\"`accounts`, `percentAllocations`, and `distributionFee` are verified by hashing  & comparing to the hash in storage associated with split `split`\",\"params\":{\"accounts\":\"Ordered, unique list of addresses with ownership in the split\",\"distributionAddress\":\"Address to pay `distributionFee` to\",\"distributionFee\":\"Keeper fee paid by split to cover gas costs of distribution\",\"percentAllocations\":\"Percent allocations associated with each address\",\"split\":\"Address of split to distribute balance for\"}},\"getController(address)\":{\"params\":{\"split\":\"Split to return controller for\"},\"returns\":{\"_0\":\"Split's controller\"}},\"getERC20Balance(address,address)\":{\"params\":{\"account\":\"Account to return ERC20 `token` balance for\",\"token\":\"Token to return balance for\"},\"returns\":{\"_0\":\"Account's balance of `token`\"}},\"getETHBalance(address)\":{\"params\":{\"account\":\"Account to return ETH balance for\"},\"returns\":{\"_0\":\"Account's balance of ETH\"}},\"getHash(address)\":{\"params\":{\"split\":\"Split to return hash for\"},\"returns\":{\"_0\":\"Split's hash\"}},\"getNewPotentialController(address)\":{\"params\":{\"split\":\"Split to return newPotentialController for\"},\"returns\":{\"_0\":\"Split's newPotentialController\"}},\"makeSplitImmutable(address)\":{\"params\":{\"split\":\"Address of mutable split to turn immutable\"}},\"predictImmutableSplitAddress(address[],uint32[],uint32)\":{\"params\":{\"accounts\":\"Ordered, unique list of addresses with ownership in the split\",\"distributionFee\":\"Keeper fee paid by split to cover gas costs of distribution\",\"percentAllocations\":\"Percent allocations associated with each address\"},\"returns\":{\"split\":\"Predicted address of such an immutable split\"}},\"transferControl(address,address)\":{\"details\":\"Two-step control transfer inspired by [dharma](https://github.com/dharma-eng/dharma-smart-wallet/blob/master/contracts/helpers/TwoStepOwnable.sol)\",\"params\":{\"newController\":\"Address to begin transferring control to\",\"split\":\"Address of mutable split to transfer control for\"}},\"updateSplit(address,address[],uint32[],uint32)\":{\"params\":{\"accounts\":\"Ordered, unique list of addresses with ownership in the split\",\"distributionFee\":\"Keeper fee paid by split to cover gas costs of distribution\",\"percentAllocations\":\"Percent allocations associated with each address\",\"split\":\"Address of mutable split to update\"}},\"withdraw(address,bool,address[])\":{\"params\":{\"account\":\"Address to withdraw on behalf of\",\"eth\":\"Bool of whether to withdraw ETH\",\"tokens\":\"Addresses of ERC20s to withdraw for\"}}},\"title\":\"SplitMain\",\"version\":1},\"userdoc\":{\"errors\":{\"Create2Error()\":[{\"notice\":\"create2 opcode failed\"}],\"CreateError()\":[{\"notice\":\"create opcode failed\"}],\"InvalidNewController(address)\":[{\"notice\":\"Invalid new controlling address `newController` for mutable split\"}],\"InvalidSplit__AccountsAndAllocationsMismatch(uint256,uint256)\":[{\"notice\":\"Array lengths of accounts & percentAllocations don't match (`accountsLength` != `allocationsLength`)\"}],\"InvalidSplit__AccountsOutOfOrder(uint256)\":[{\"notice\":\"Invalid accounts ordering at `index`\"}],\"InvalidSplit__AllocationMustBePositive(uint256)\":[{\"notice\":\"Invalid percentAllocation of zero at `index`\"}],\"InvalidSplit__InvalidAllocationsSum(uint32)\":[{\"notice\":\"Invalid percentAllocations sum `allocationsSum` must equal `PERCENTAGE_SCALE`\"}],\"InvalidSplit__InvalidDistributionFee(uint32)\":[{\"notice\":\"Invalid distributionFee `distributionFee` cannot be greater than 10% (1e5)\"}],\"InvalidSplit__InvalidHash(bytes32)\":[{\"notice\":\"Invalid hash `hash` from split data (accounts, percentAllocations, distributionFee)\"}],\"InvalidSplit__TooFewAccounts(uint256)\":[{\"notice\":\"Invalid number of accounts `accountsLength`, must have at least 2\"}],\"Unauthorized(address)\":[{\"notice\":\"Unauthorized sender `sender`\"}]},\"events\":{\"CancelControlTransfer(address)\":{\"notice\":\"emitted after each canceled split control transfer\"},\"ControlTransfer(address,address,address)\":{\"notice\":\"emitted after each successful split control transfer\"},\"CreateSplit(address)\":{\"notice\":\"emitted after each successful split creation\"},\"DistributeERC20(address,address,uint256,address)\":{\"notice\":\"emitted after each successful ERC20 balance split\"},\"DistributeETH(address,uint256,address)\":{\"notice\":\"emitted after each successful ETH balance split\"},\"InitiateControlTransfer(address,address)\":{\"notice\":\"emitted after each initiated split control transfer\"},\"UpdateSplit(address)\":{\"notice\":\"emitted after each successful split update\"},\"Withdrawal(address,bool,address[],uint256[])\":{\"notice\":\"emitted after each successful withdrawal\"}},\"kind\":\"user\",\"methods\":{\"PERCENTAGE_SCALE()\":{\"notice\":\"constant to scale uints into percentages (1e6 == 100%)\"},\"acceptControl(address)\":{\"notice\":\"Accepts transfer of the controlling address of mutable split `split`\"},\"cancelControlTransfer(address)\":{\"notice\":\"Cancels transfer of the controlling address of mutable split `split`\"},\"constructor\":{\"notice\":\"CONSTRUCTOR\"},\"createSplit(address[],uint32[],uint32,address)\":{\"notice\":\"Creates a new split with recipients `accounts` with ownerships `percentAllocations`, a keeper fee for splitting of `distributionFee` and the controlling address `controller`\"},\"distributeERC20(address,address,address[],uint32[],uint32,address)\":{\"notice\":\"Distributes the ERC20 `token` balance for split `split`\"},\"distributeETH(address,address[],uint32[],uint32,address)\":{\"notice\":\"Distributes the ETH balance for split `split`\"},\"getController(address)\":{\"notice\":\"Returns the current controller of split `split`\"},\"getERC20Balance(address,address)\":{\"notice\":\"Returns the ERC20 balance of token `token` for account `account`\"},\"getETHBalance(address)\":{\"notice\":\"Returns the current ETH balance of account `account`\"},\"getHash(address)\":{\"notice\":\"Returns the current hash of split `split`\"},\"getNewPotentialController(address)\":{\"notice\":\"Returns the current newPotentialController of split `split`\"},\"makeSplitImmutable(address)\":{\"notice\":\"Turns mutable split `split` immutable\"},\"predictImmutableSplitAddress(address[],uint32[],uint32)\":{\"notice\":\"Predicts the address for an immutable split created with recipients `accounts` with ownerships `percentAllocations` and a keeper fee for splitting of `distributionFee`\"},\"transferControl(address,address)\":{\"notice\":\"Begins transfer of the controlling address of mutable split `split` to `newController`\"},\"updateSplit(address,address[],uint32[],uint32)\":{\"notice\":\"Updates an existing split with recipients `accounts` with ownerships `percentAllocations` and a keeper fee for splitting of `distributionFee`\"},\"walletImplementation()\":{\"notice\":\"address of wallet implementation for split proxies\"},\"withdraw(address,bool,address[])\":{\"notice\":\"Withdraw ETH &/ ERC20 balances for account `account`\"}},\"notice\":\"A composable and gas-efficient protocol for deploying splitter contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/0xSplits/SplitMain.sol\":\"SplitMain\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x698cdbf614109fafc2bf00057b60715fa3aba9dad447c42f4f8b749ae16ce84f\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\nlibrary SafeTransferLib {\\n    /*///////////////////////////////////////////////////////////////\\n                            ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 100 because the calldata length is 4 + 32 * 3.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\\n        assembly {\\n            // Get how many bytes the call returned.\\n            let returnDataSize := returndatasize()\\n\\n            // If the call reverted:\\n            if iszero(callStatus) {\\n                // Copy the revert message into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Revert with the same message.\\n                revert(0, returnDataSize)\\n            }\\n\\n            switch returnDataSize\\n            case 32 {\\n                // Copy the return data into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Set success to whether it returned true.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            case 0 {\\n                // There was no return data.\\n                success := 1\\n            }\\n            default {\\n                // It returned some malformed input.\\n                success := 0\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcc39d0f5693925ea1e8c517f7cc24211a9899c83a57e62d806180cdb056b6b75\",\"license\":\"AGPL-3.0-only\"},\"contracts/0xSplits/SplitMain.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.4;\\n\\nimport {ISplitMain} from './interfaces/ISplitMain.sol';\\nimport {SplitWallet} from './SplitWallet.sol';\\nimport {Clones} from './libraries/Clones.sol';\\nimport {ERC20} from '@rari-capital/solmate/src/tokens/ERC20.sol';\\nimport {SafeTransferLib} from '@rari-capital/solmate/src/utils/SafeTransferLib.sol';\\n\\n/**\\n                                                    ,s# ## mp\\n                                                ;# ########### #p\\n                                           ,s@ ######## B ########  m,\\n                                       ,s# ####### W2`      l% ######## #p\\n                                  ,s# ######## K*               |8 ######## #m,\\n                              ,s# ######## f^                        7  ######## mp\\n                          ;# ######## b|                                 |8 #######\\n                     ,s  ######## b|                                   ,s  #########\\n                 ,m# ####### 8T`                                   ;# ##############\\n            ,;# ######## B7                                   ,s  ######## K7  @####\\n        ,s# ######## T\\\"                                   ,s  ######## T^      @####\\n    ,# ######## W|                                    ;# ######## W2           @####\\n    #########p                                   ,s  ######## B\\\\               @####\\n    ########### #p                           ,## ##########\\\"                   @####\\n    ###### ########  m,                 ,;# ######## B@####                    @####\\n    #####   ^l ######### Qp         ,s# ######## b^   @####                    @####\\n    #####        |8 ######## #m,;# ######## 8|        @####                    @####\\n    #####            |8 ############### T|            @####                    @####\\n    #####                '3  ######## mp              @####                    @####\\n    #####                     |8 ######## #m,         @####                    @####\\n    #####                          j  ######## m,     @####                    @####\\n    #####                              |8 ######## #p @####                    @####\\n    #####                                  ^7 #############                    @####\\n    ##### Qp                                    |Y ########                    @####\\n    %######## #p,                                   |8@####                    @####\\n       j  ######## mp                                 @####                    @####\\n           \\\"Y ######## #p                             @####                    @####\\n               ^7 ########  m,                        @####                    @####\\n                    l% ######## #p                    @####                    @####\\n                        |8 ######## #m,               @####               ,s# ######\\n                             7  ######## m,           @####           ,s# ######## \\\\\\n                                 |5 ######## #p       @####       ;# ######## 8\\\\\\n                                     '7 ########  m,  @####  ,s@ ######## b7\\n                                          l8 ######## #####  ####### WT`\\n                                              |8 ############### B|\\n                                                   7  ###### T\\\"\\n */\\n\\n/**\\n * ERRORS\\n */\\n\\n/// @notice Unauthorized sender `sender`\\n/// @param sender Transaction sender\\nerror Unauthorized(address sender);\\n/// @notice Invalid number of accounts `accountsLength`, must have at least 2\\n/// @param accountsLength Length of accounts array\\nerror InvalidSplit__TooFewAccounts(uint256 accountsLength);\\n/// @notice Array lengths of accounts & percentAllocations don't match (`accountsLength` != `allocationsLength`)\\n/// @param accountsLength Length of accounts array\\n/// @param allocationsLength Length of percentAllocations array\\nerror InvalidSplit__AccountsAndAllocationsMismatch(uint256 accountsLength, uint256 allocationsLength);\\n/// @notice Invalid percentAllocations sum `allocationsSum` must equal `PERCENTAGE_SCALE`\\n/// @param allocationsSum Sum of percentAllocations array\\nerror InvalidSplit__InvalidAllocationsSum(uint32 allocationsSum);\\n/// @notice Invalid accounts ordering at `index`\\n/// @param index Index of out-of-order account\\nerror InvalidSplit__AccountsOutOfOrder(uint256 index);\\n/// @notice Invalid percentAllocation of zero at `index`\\n/// @param index Index of zero percentAllocation\\nerror InvalidSplit__AllocationMustBePositive(uint256 index);\\n/// @notice Invalid distributionFee `distributionFee` cannot be greater than 10% (1e5)\\n/// @param distributionFee Invalid distributionFee amount\\nerror InvalidSplit__InvalidDistributionFee(uint32 distributionFee);\\n/// @notice Invalid hash `hash` from split data (accounts, percentAllocations, distributionFee)\\n/// @param hash Invalid hash\\nerror InvalidSplit__InvalidHash(bytes32 hash);\\n/// @notice Invalid new controlling address `newController` for mutable split\\n/// @param newController Invalid new controller\\nerror InvalidNewController(address newController);\\n\\n/**\\n * @title SplitMain\\n * @author 0xSplits <will@0xSplits.xyz>\\n * @notice A composable and gas-efficient protocol for deploying splitter contracts.\\n * @dev Split recipients, ownerships, and keeper fees are stored onchain as calldata & re-passed as args / validated\\n * via hashing when needed. Each split gets its own address & proxy for maximum composability with other contracts onchain.\\n * For these proxies, we extended EIP-1167 Minimal Proxy Contract to avoid `DELEGATECALL` inside `receive()` to accept\\n * hard gas-capped `sends` & `transfers`.\\n */\\ncontract SplitMain is ISplitMain {\\n    using SafeTransferLib for address;\\n    using SafeTransferLib for ERC20;\\n\\n    /**\\n     * STRUCTS\\n     */\\n\\n    /// @notice holds Split metadata\\n    struct Split {\\n        bytes32 hash;\\n        address controller;\\n        address newPotentialController;\\n    }\\n\\n    /**\\n     * STORAGE\\n     */\\n\\n    /**\\n     * STORAGE - CONSTANTS & IMMUTABLES\\n     */\\n\\n    /// @notice constant to scale uints into percentages (1e6 == 100%)\\n    uint256 public constant PERCENTAGE_SCALE = 1e6;\\n    /// @notice maximum distribution fee; 1e5 = 10% * PERCENTAGE_SCALE\\n    uint256 internal constant MAX_DISTRIBUTION_FEE = 1e5;\\n    /// @notice address of wallet implementation for split proxies\\n    address public immutable override walletImplementation;\\n\\n    /**\\n     * STORAGE - VARIABLES - PRIVATE & INTERNAL\\n     */\\n\\n    /// @notice mapping to account ETH balances\\n    mapping(address => uint256) internal ethBalances;\\n    /// @notice mapping to account ERC20 balances\\n    mapping(ERC20 => mapping(address => uint256)) internal erc20Balances;\\n    /// @notice mapping to Split metadata\\n    mapping(address => Split) internal splits;\\n\\n    /**\\n     * MODIFIERS\\n     */\\n\\n    /** @notice Reverts if the sender doesn't own the split `split`\\n     *  @param split Address to check for control\\n     */\\n    modifier onlySplitController(address split) {\\n        if (msg.sender != splits[split].controller) revert Unauthorized(msg.sender);\\n        _;\\n    }\\n\\n    /** @notice Reverts if the sender isn't the new potential controller of split `split`\\n     *  @param split Address to check for new potential control\\n     */\\n    modifier onlySplitNewPotentialController(address split) {\\n        if (msg.sender != splits[split].newPotentialController) revert Unauthorized(msg.sender);\\n        _;\\n    }\\n\\n    /** @notice Reverts if the split with recipients represented by `accounts` and `percentAllocations` is malformed\\n     *  @param accounts Ordered, unique list of addresses with ownership in the split\\n     *  @param percentAllocations Percent allocations associated with each address\\n     *  @param distributionFee Keeper fee paid by split to cover gas costs of distribution\\n     */\\n    modifier validSplit(\\n        address[] memory accounts,\\n        uint32[] memory percentAllocations,\\n        uint32 distributionFee\\n    ) {\\n        if (accounts.length < 2) revert InvalidSplit__TooFewAccounts(accounts.length);\\n        if (accounts.length != percentAllocations.length)\\n            revert InvalidSplit__AccountsAndAllocationsMismatch(accounts.length, percentAllocations.length);\\n        // _getSum should overflow if any percentAllocation[i] < 0\\n        if (_getSum(percentAllocations) != PERCENTAGE_SCALE)\\n            revert InvalidSplit__InvalidAllocationsSum(_getSum(percentAllocations));\\n        unchecked {\\n            // overflow should be impossible in for-loop index\\n            // cache accounts length to save gas\\n            uint256 loopLength = accounts.length - 1;\\n            for (uint256 i = 0; i < loopLength; i++) {\\n                // overflow should be impossible in array access math\\n                if (accounts[i] >= accounts[i + 1]) revert InvalidSplit__AccountsOutOfOrder(i);\\n                if (percentAllocations[i] == uint32(0)) revert InvalidSplit__AllocationMustBePositive(i);\\n            }\\n            // overflow should be impossible in array access math with validated equal array lengths\\n            if (percentAllocations[loopLength] == uint32(0)) revert InvalidSplit__AllocationMustBePositive(loopLength);\\n        }\\n        if (distributionFee > MAX_DISTRIBUTION_FEE) revert InvalidSplit__InvalidDistributionFee(distributionFee);\\n        _;\\n    }\\n\\n    /** @notice Reverts if `newController` is the zero address\\n     *  @param newController Proposed new controlling address\\n     */\\n    modifier validNewController(address newController) {\\n        if (newController == address(0)) revert InvalidNewController(newController);\\n        _;\\n    }\\n\\n    /**\\n     * CONSTRUCTOR\\n     */\\n\\n    constructor() {\\n        walletImplementation = address(new SplitWallet());\\n    }\\n\\n    /**\\n     * FUNCTIONS\\n     */\\n\\n    /**\\n     * FUNCTIONS - PUBLIC & EXTERNAL\\n     */\\n\\n    /** @notice Receive ETH\\n     *  @dev Used by split proxies in `distributeETH` to transfer ETH to `SplitMain`\\n     *  Funds sent outside of `distributeETH` will be unrecoverable\\n     */\\n    receive() external payable {}\\n\\n    /** @notice Creates a new split with recipients `accounts` with ownerships `percentAllocations`, a keeper fee for splitting of `distributionFee` and the controlling address `controller`\\n     *  @param accounts Ordered, unique list of addresses with ownership in the split\\n     *  @param percentAllocations Percent allocations associated with each address\\n     *  @param distributionFee Keeper fee paid by split to cover gas costs of distribution\\n     *  @param controller Controlling address (0x0 if immutable)\\n     *  @return split Address of newly created split\\n     */\\n    function createSplit(\\n        address[] calldata accounts,\\n        uint32[] calldata percentAllocations,\\n        uint32 distributionFee,\\n        address controller\\n    ) external override validSplit(accounts, percentAllocations, distributionFee) returns (address split) {\\n        bytes32 splitHash = _hashSplit(accounts, percentAllocations, distributionFee);\\n        if (controller == address(0)) {\\n            // create immutable split\\n            split = Clones.cloneDeterministic(walletImplementation, splitHash);\\n        } else {\\n            // create mutable split\\n            split = Clones.clone(walletImplementation);\\n            splits[split].controller = controller;\\n        }\\n        // store split's hash in storage for future verification\\n        splits[split].hash = splitHash;\\n        emit CreateSplit(split);\\n    }\\n\\n    /** @notice Predicts the address for an immutable split created with recipients `accounts` with ownerships `percentAllocations` and a keeper fee for splitting of `distributionFee`\\n     *  @param accounts Ordered, unique list of addresses with ownership in the split\\n     *  @param percentAllocations Percent allocations associated with each address\\n     *  @param distributionFee Keeper fee paid by split to cover gas costs of distribution\\n     *  @return split Predicted address of such an immutable split\\n     */\\n    function predictImmutableSplitAddress(\\n        address[] calldata accounts,\\n        uint32[] calldata percentAllocations,\\n        uint32 distributionFee\\n    ) external view override validSplit(accounts, percentAllocations, distributionFee) returns (address split) {\\n        bytes32 splitHash = _hashSplit(accounts, percentAllocations, distributionFee);\\n        split = Clones.predictDeterministicAddress(walletImplementation, splitHash);\\n    }\\n\\n    /** @notice Updates an existing split with recipients `accounts` with ownerships `percentAllocations` and a keeper fee for splitting of `distributionFee`\\n     *  @param split Address of mutable split to update\\n     *  @param accounts Ordered, unique list of addresses with ownership in the split\\n     *  @param percentAllocations Percent allocations associated with each address\\n     *  @param distributionFee Keeper fee paid by split to cover gas costs of distribution\\n     */\\n    function updateSplit(\\n        address split,\\n        address[] calldata accounts,\\n        uint32[] calldata percentAllocations,\\n        uint32 distributionFee\\n    ) external override onlySplitController(split) validSplit(accounts, percentAllocations, distributionFee) {\\n        bytes32 splitHash = _hashSplit(accounts, percentAllocations, distributionFee);\\n        // store new hash in storage for future verification\\n        splits[split].hash = splitHash;\\n        emit UpdateSplit(split);\\n    }\\n\\n    /** @notice Begins transfer of the controlling address of mutable split `split` to `newController`\\n     *  @dev Two-step control transfer inspired by [dharma](https://github.com/dharma-eng/dharma-smart-wallet/blob/master/contracts/helpers/TwoStepOwnable.sol)\\n     *  @param split Address of mutable split to transfer control for\\n     *  @param newController Address to begin transferring control to\\n     */\\n    function transferControl(address split, address newController)\\n        external\\n        override\\n        onlySplitController(split)\\n        validNewController(newController)\\n    {\\n        splits[split].newPotentialController = newController;\\n        emit InitiateControlTransfer(split, newController);\\n    }\\n\\n    /** @notice Cancels transfer of the controlling address of mutable split `split`\\n     *  @param split Address of mutable split to cancel control transfer for\\n     */\\n    function cancelControlTransfer(address split) external override onlySplitController(split) {\\n        delete splits[split].newPotentialController;\\n        emit CancelControlTransfer(split);\\n    }\\n\\n    /** @notice Accepts transfer of the controlling address of mutable split `split`\\n     *  @param split Address of mutable split to accept control transfer for\\n     */\\n    function acceptControl(address split) external override onlySplitNewPotentialController(split) {\\n        delete splits[split].newPotentialController;\\n        emit ControlTransfer(split, splits[split].controller, msg.sender);\\n        splits[split].controller = msg.sender;\\n    }\\n\\n    /** @notice Turns mutable split `split` immutable\\n     *  @param split Address of mutable split to turn immutable\\n     */\\n    function makeSplitImmutable(address split) external override onlySplitController(split) {\\n        delete splits[split].newPotentialController;\\n        emit ControlTransfer(split, splits[split].controller, address(0));\\n        splits[split].controller = address(0);\\n    }\\n\\n    /** @notice Distributes the ETH balance for split `split`\\n     *  @dev `accounts`, `percentAllocations`, and `distributionFee` are verified by hashing\\n     *  & comparing to the hash in storage associated with split `split`\\n     *  @param split Address of split to distribute balance for\\n     *  @param accounts Ordered, unique list of addresses with ownership in the split\\n     *  @param percentAllocations Percent allocations associated with each address\\n     *  @param distributionFee Keeper fee paid by split to cover gas costs of distribution\\n     *  @param distributionAddress Address to pay `distributionFee` to\\n     */\\n    function distributeETH(\\n        address split,\\n        address[] memory accounts,\\n        uint32[] memory percentAllocations,\\n        uint32 distributionFee,\\n        address distributionAddress\\n    ) external override validSplit(accounts, percentAllocations, distributionFee) {\\n        // use internal fn instead of modifier to avoid stack depth compiler errors\\n        _validSplitHash(split, accounts, percentAllocations, distributionFee);\\n        uint256 mainBalance = ethBalances[split];\\n        uint256 proxyBalance = split.balance;\\n        // leave balance of 1 in SplitMain for gas efficiency\\n        // underflow if mainBalance + proxyBalance = 0 (no funds to split)\\n        uint256 amountToSplit = mainBalance + proxyBalance - 1;\\n        if (mainBalance != 1) ethBalances[split] = 1;\\n        // emit event with gross amountToSplit (before deducting distributionFee)\\n        emit DistributeETH(split, amountToSplit, distributionAddress);\\n        if (distributionFee != 0) {\\n            // given `amountToSplit`, calculate keeper fee\\n            uint256 distributionFeeAmount = _scaleAmountByPercentage(amountToSplit, distributionFee);\\n            unchecked {\\n                // credit keeper with fee\\n                // overflow should be impossible with validated distributionFee\\n                ethBalances[\\n                    distributionAddress != address(0) ? distributionAddress : msg.sender\\n                ] += distributionFeeAmount;\\n                // given keeper fee, calculate how much to distribute to split recipients\\n                // underflow should be impossible with validated distributionFee\\n                amountToSplit -= distributionFeeAmount;\\n            }\\n        }\\n        unchecked {\\n            // distribute remaining balance\\n            // overflow should be impossible in for-loop index\\n            // cache accounts length to save gas\\n            uint256 accountsLength = accounts.length;\\n            for (uint256 i = 0; i < accountsLength; i++) {\\n                // overflow should be impossible with validated allocations\\n                ethBalances[accounts[i]] += _scaleAmountByPercentage(amountToSplit, percentAllocations[i]);\\n            }\\n        }\\n        // flush proxy ETH balance to SplitMain\\n        // split proxy should be guaranteed to exist at this address after validating splitHash\\n        // (attacker can't deploy own contract to address with high balance & empty sendETHToMain\\n        // to drain ETH from SplitMain)\\n        // could technically check if (change in proxy balance == change in SplitMain balance)\\n        // before/after external call, but seems like extra gas for no practical benefit\\n        if (proxyBalance > 0) SplitWallet(split).sendETHToMain(proxyBalance);\\n    }\\n\\n    /** @notice Distributes the ERC20 `token` balance for split `split`\\n     *  @dev `accounts`, `percentAllocations`, and `distributionFee` are verified by hashing\\n     *  & comparing to the hash in storage associated with split `split`\\n     *  @dev pernicious ERC20s may cause overflow in this function inside\\n     *  _scaleAmountByPercentage, but results do not affect ETH & other ERC20 balances\\n     *  @param split Address of split to distribute balance for\\n     *  @param token Address of ERC20 to distribute balance for\\n     *  @param accounts Ordered, unique list of addresses with ownership in the split\\n     *  @param percentAllocations Percent allocations associated with each address\\n     *  @param distributionFee Keeper fee paid by split to cover gas costs of distribution\\n     *  @param distributionAddress Address to pay `distributionFee` to\\n     */\\n    function distributeERC20(\\n        address split,\\n        ERC20 token,\\n        address[] memory accounts,\\n        uint32[] memory percentAllocations,\\n        uint32 distributionFee,\\n        address distributionAddress\\n    ) external override validSplit(accounts, percentAllocations, distributionFee) {\\n        // use internal fn instead of modifier to avoid stack depth compiler errors\\n        _validSplitHash(split, accounts, percentAllocations, distributionFee);\\n        uint256 amountToSplit;\\n        uint256 mainBalance = erc20Balances[token][split];\\n        uint256 proxyBalance = token.balanceOf(split);\\n        if (proxyBalance > 1) {\\n            unchecked {\\n                // leave balance of 1 in ERC20 for gas efficiency\\n                // leave balances of 1 in SplitMain for gas efficiency\\n                // overflow impossible with proxyBalance >= 2\\n                amountToSplit = mainBalance + proxyBalance - 2;\\n            }\\n        } else {\\n            // leave balances of 1 in SplitMain for gas efficiency\\n            // underflow if erc20Balance is 0 & proxyBalance is 0 or 1 (no funds to split)\\n            amountToSplit = mainBalance - 1;\\n        }\\n        // leave balance of 1 for gas efficiency\\n        if (mainBalance != 1) erc20Balances[token][split] = 1;\\n        // emit event with gross amountToSplit (before deducting distributionFee)\\n        emit DistributeERC20(split, token, amountToSplit, distributionAddress);\\n        if (distributionFee != 0) {\\n            // given `amountToSplit`, calculate keeper fee\\n            uint256 distributionFeeAmount = _scaleAmountByPercentage(amountToSplit, distributionFee);\\n            // overflow should be impossible with validated distributionFee\\n            unchecked {\\n                // credit keeper with fee\\n                erc20Balances[token][\\n                    distributionAddress != address(0) ? distributionAddress : msg.sender\\n                ] += distributionFeeAmount;\\n                // given keeper fee, calculate how much to distribute to split recipients\\n                amountToSplit -= distributionFeeAmount;\\n            }\\n        }\\n        // distribute remaining balance\\n        // overflows should be impossible in for-loop with validated allocations\\n        unchecked {\\n            // cache accounts length to save gas\\n            uint256 accountsLength = accounts.length;\\n            for (uint256 i = 0; i < accountsLength; i++) {\\n                erc20Balances[token][accounts[i]] += _scaleAmountByPercentage(amountToSplit, percentAllocations[i]);\\n            }\\n        }\\n        // split proxy should be guaranteed to exist at this address after validating splitHash\\n        // (attacker can't deploy own contract to address with high ERC20 balance & empty\\n        // sendERC20ToMain to drain ERC20 from SplitMain)\\n        // could technically check if (change in proxy ERC20 balance == change in splitmain\\n        // ERC20 balance) before/after external call, but seems like extra gas for no practical benefit\\n        unchecked {\\n            // flush proxy ERC20 balance to SplitMain\\n            // leave balance of 1 in ERC20 for gas efficiency\\n            // overflow is impossible in proxyBalance math\\n            if (proxyBalance > 1) SplitWallet(split).sendERC20ToMain(token, proxyBalance - 1);\\n        }\\n    }\\n\\n    /** @notice Withdraw ETH &/ ERC20 balances for account `account`\\n     *  @param account Address to withdraw on behalf of\\n     *  @param eth Bool of whether to withdraw ETH\\n     *  @param tokens Addresses of ERC20s to withdraw for\\n     */\\n    function withdraw(\\n        address account,\\n        bool eth,\\n        ERC20[] calldata tokens\\n    ) external override {\\n        uint256 ethUint = eth ? 1 : 0;\\n        unchecked {\\n            // overflow should be impossible in array length math\\n            uint256[] memory withdrawnAmounts = new uint256[](ethUint + tokens.length);\\n            if (eth) {\\n                withdrawnAmounts[0] = _withdraw(account);\\n            }\\n            // overflow should be impossible in for-loop index\\n            for (uint256 i = 0; i < tokens.length; i++) {\\n                // overflow should be impossible in array length math\\n                withdrawnAmounts[ethUint + i] = _withdrawERC20(account, tokens[i]);\\n            }\\n            emit Withdrawal(account, eth, tokens, withdrawnAmounts);\\n        }\\n    }\\n\\n    /**\\n     * FUNCTIONS - VIEWS\\n     */\\n\\n    /** @notice Returns the current hash of split `split`\\n     *  @param split Split to return hash for\\n     *  @return Split's hash\\n     */\\n    function getHash(address split) external view returns (bytes32) {\\n        return splits[split].hash;\\n    }\\n\\n    /** @notice Returns the current controller of split `split`\\n     *  @param split Split to return controller for\\n     *  @return Split's controller\\n     */\\n    function getController(address split) external view returns (address) {\\n        return splits[split].controller;\\n    }\\n\\n    /** @notice Returns the current newPotentialController of split `split`\\n     *  @param split Split to return newPotentialController for\\n     *  @return Split's newPotentialController\\n     */\\n    function getNewPotentialController(address split) external view returns (address) {\\n        return splits[split].newPotentialController;\\n    }\\n\\n    /** @notice Returns the current ETH balance of account `account`\\n     *  @param account Account to return ETH balance for\\n     *  @return Account's balance of ETH\\n     */\\n    function getETHBalance(address account) external view returns (uint256) {\\n        return ethBalances[account];\\n    }\\n\\n    /** @notice Returns the ERC20 balance of token `token` for account `account`\\n     *  @param account Account to return ERC20 `token` balance for\\n     *  @param token Token to return balance for\\n     *  @return Account's balance of `token`\\n     */\\n    function getERC20Balance(address account, ERC20 token) external view returns (uint256) {\\n        return erc20Balances[token][account];\\n    }\\n\\n    /**\\n     * FUNCTIONS - PRIVATE & INTERNAL\\n     */\\n\\n    /** @notice Sums array of uint32s\\n     *  @param numbers Array of uint32s to sum\\n     *  @return sum Sum of `numbers`.\\n     */\\n    function _getSum(uint32[] memory numbers) internal pure returns (uint32 sum) {\\n        // overflow should be impossible in for-loop index\\n        uint256 numbersLength = numbers.length;\\n        for (uint256 i = 0; i < numbersLength; ) {\\n            sum += numbers[i];\\n            unchecked {\\n                // overflow should be impossible in for-loop index\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /** @notice Hashes a split\\n     *  @param accounts Ordered, unique list of addresses with ownership in the split\\n     *  @param percentAllocations Percent allocations associated with each address\\n     *  @param distributionFee Keeper fee paid by split to cover gas costs of distribution\\n     *  @return computedHash Hash of the split.\\n     */\\n    function _hashSplit(\\n        address[] memory accounts,\\n        uint32[] memory percentAllocations,\\n        uint32 distributionFee\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(accounts, percentAllocations, distributionFee));\\n    }\\n\\n    /** @notice Checks hash from `accounts`, `percentAllocations`, and `distributionFee` against the hash stored for `split`\\n     *  @param split Address of hash to check\\n     *  @param accounts Ordered, unique list of addresses with ownership in the split\\n     *  @param percentAllocations Percent allocations associated with each address\\n     *  @param distributionFee Keeper fee paid by split to cover gas costs of distribution\\n     */\\n    function _validSplitHash(\\n        address split,\\n        address[] memory accounts,\\n        uint32[] memory percentAllocations,\\n        uint32 distributionFee\\n    ) internal view {\\n        bytes32 hash = _hashSplit(accounts, percentAllocations, distributionFee);\\n        if (splits[split].hash != hash) revert InvalidSplit__InvalidHash(hash);\\n    }\\n\\n    /** @notice Multiplies an amount by a scaled percentage\\n     *  @param amount Amount to get `scaledPercentage` of\\n     *  @param scaledPercent Percent scaled by PERCENTAGE_SCALE\\n     *  @return scaledAmount Percent of `amount`.\\n     */\\n    function _scaleAmountByPercentage(uint256 amount, uint256 scaledPercent)\\n        internal\\n        pure\\n        returns (uint256 scaledAmount)\\n    {\\n        // use assembly to bypass checking for overflow & division by 0\\n        // scaledPercent has been validated to be < PERCENTAGE_SCALE)\\n        // & PERCENTAGE_SCALE will never be 0\\n        // pernicious ERC20s may cause overflow, but results do not affect ETH & other ERC20 balances\\n        assembly {\\n            /* eg (100 * 2*1e4) / (1e6) */\\n            scaledAmount := div(mul(amount, scaledPercent), PERCENTAGE_SCALE)\\n        }\\n    }\\n\\n    /** @notice Withdraw ETH for account `account`\\n     *  @param account Account to withdrawn ETH for\\n     *  @return withdrawn Amount of ETH withdrawn\\n     */\\n    function _withdraw(address account) internal returns (uint256 withdrawn) {\\n        // leave balance of 1 for gas efficiency\\n        // underflow is ethBalance is 0\\n        withdrawn = ethBalances[account] - 1;\\n        ethBalances[account] = 1;\\n        account.safeTransferETH(withdrawn);\\n    }\\n\\n    /** @notice Withdraw ERC20 `token` for account `account`\\n     *  @param account Account to withdrawn ERC20 `token` for\\n     *  @return withdrawn Amount of ERC20 `token` withdrawn\\n     */\\n    function _withdrawERC20(address account, ERC20 token) internal returns (uint256 withdrawn) {\\n        // leave balance of 1 for gas efficiency\\n        // underflow is erc20Balance is 0\\n        withdrawn = erc20Balances[token][account] - 1;\\n        erc20Balances[token][account] = 1;\\n        token.safeTransfer(account, withdrawn);\\n    }\\n}\\n\",\"keccak256\":\"0x66924f74a1af06c9e2913532b47873cc1490b803329859aca8f16512d7682ffe\",\"license\":\"GPL-3.0-or-later\"},\"contracts/0xSplits/SplitWallet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.4;\\n\\nimport {ISplitMain} from './interfaces/ISplitMain.sol';\\nimport {ERC20} from '@rari-capital/solmate/src/tokens/ERC20.sol';\\nimport {SafeTransferLib} from '@rari-capital/solmate/src/utils/SafeTransferLib.sol';\\n\\n/**\\n * ERRORS\\n */\\n\\n/// @notice Unauthorized sender\\nerror Unauthorized();\\n\\n/**\\n * @title SplitWallet\\n * @author 0xSplits <will@0xSplits.xyz>\\n * @notice The implementation logic for `SplitProxy`.\\n * @dev `SplitProxy` handles `receive()` itself to avoid the gas cost with `DELEGATECALL`.\\n */\\ncontract SplitWallet {\\n  using SafeTransferLib for address;\\n  using SafeTransferLib for ERC20;\\n\\n  /**\\n   * EVENTS\\n   */\\n\\n  /** @notice emitted after each successful ETH transfer to proxy\\n   *  @param split Address of the split that received ETH\\n   *  @param amount Amount of ETH received\\n   */\\n  event ReceiveETH(address indexed split, uint256 amount);\\n\\n  /**\\n   * STORAGE\\n   */\\n\\n  /**\\n   * STORAGE - CONSTANTS & IMMUTABLES\\n   */\\n\\n  /// @notice address of SplitMain for split distributions & EOA/SC withdrawals\\n  ISplitMain public immutable splitMain;\\n\\n  /**\\n   * MODIFIERS\\n   */\\n\\n  /// @notice Reverts if the sender isn't SplitMain\\n  modifier onlySplitMain() {\\n    if (msg.sender != address(splitMain)) revert Unauthorized();\\n    _;\\n  }\\n\\n  /**\\n   * CONSTRUCTOR\\n   */\\n\\n  constructor() {\\n    splitMain = ISplitMain(msg.sender);\\n  }\\n\\n  /**\\n   * FUNCTIONS - PUBLIC & EXTERNAL\\n   */\\n\\n  /** @notice Sends amount `amount` of ETH in proxy to SplitMain\\n   *  @param amount Amount to send\\n   */\\n  function sendETHToMain(uint256 amount) external onlySplitMain() {\\n    address(splitMain).safeTransferETH(amount);\\n  }\\n\\n  /** @notice Sends amount `amount` of ERC20 `token` in proxy to SplitMain\\n   *  @param token Token to send\\n   *  @param amount Amount to send\\n   */\\n  function sendERC20ToMain(ERC20 token, uint256 amount)\\n    external\\n    onlySplitMain()\\n  {\\n    token.safeTransfer(address(splitMain), amount);\\n  }\\n}\\n\",\"keccak256\":\"0x00a976423ec7639868ed2c7ec2395d4c897f2bcb979ead39269a521ee604bd18\",\"license\":\"GPL-3.0-or-later\"},\"contracts/0xSplits/interfaces/ISplitMain.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.4;\\n\\nimport {ERC20} from '@rari-capital/solmate/src/tokens/ERC20.sol';\\n\\n/**\\n * @title ISplitMain\\n * @author 0xSplits <will@0xSplits.xyz>\\n */\\ninterface ISplitMain {\\n  /**\\n   * FUNCTIONS\\n   */\\n\\n  function walletImplementation() external returns (address);\\n\\n  function createSplit(\\n    address[] calldata accounts,\\n    uint32[] calldata percentAllocations,\\n    uint32 distributionFee,\\n    address controller\\n  ) external returns (address);\\n\\n  function predictImmutableSplitAddress(\\n    address[] calldata accounts,\\n    uint32[] calldata percentAllocations,\\n    uint32 distributionFee\\n  ) external view returns (address);\\n\\n  function updateSplit(\\n    address split,\\n    address[] calldata accounts,\\n    uint32[] calldata percentAllocations,\\n    uint32 distributionFee\\n  ) external;\\n\\n  function transferControl(address split, address newController) external;\\n\\n  function cancelControlTransfer(address split) external;\\n\\n  function acceptControl(address split) external;\\n\\n  function makeSplitImmutable(address split) external;\\n\\n  function distributeETH(\\n    address split,\\n    address[] calldata accounts,\\n    uint32[] calldata percentAllocations,\\n    uint32 distributionFee,\\n    address distributionAddress\\n  ) external;\\n\\n  function distributeERC20(\\n    address split,\\n    ERC20 token,\\n    address[] calldata accounts,\\n    uint32[] calldata percentAllocations,\\n    uint32 distributionFee,\\n    address distributionAddress\\n  ) external;\\n\\n  function withdraw(\\n    address account,\\n    bool eth,\\n    ERC20[] calldata tokens\\n  ) external;\\n\\n  /**\\n   * EVENTS\\n   */\\n\\n  /** @notice emitted after each successful split creation\\n   *  @param split Address of the created split\\n   */\\n  event CreateSplit(address indexed split);\\n\\n  /** @notice emitted after each successful split update\\n   *  @param split Address of the updated split\\n   */\\n  event UpdateSplit(address indexed split);\\n\\n  /** @notice emitted after each initiated split control transfer\\n   *  @param split Address of the split control transfer was initiated for\\n   *  @param newPotentialController Address of the split's new potential controller\\n   */\\n  event InitiateControlTransfer(\\n    address indexed split,\\n    address indexed newPotentialController\\n  );\\n\\n  /** @notice emitted after each canceled split control transfer\\n   *  @param split Address of the split control transfer was canceled for\\n   */\\n  event CancelControlTransfer(address indexed split);\\n\\n  /** @notice emitted after each successful split control transfer\\n   *  @param split Address of the split control was transferred for\\n   *  @param previousController Address of the split's previous controller\\n   *  @param newController Address of the split's new controller\\n   */\\n  event ControlTransfer(\\n    address indexed split,\\n    address indexed previousController,\\n    address indexed newController\\n  );\\n\\n  /** @notice emitted after each successful ETH balance split\\n   *  @param split Address of the split that distributed its balance\\n   *  @param amount Amount of ETH distributed\\n   *  @param distributionAddress Address to credit distribution fee to\\n   */\\n  event DistributeETH(\\n    address indexed split,\\n    uint256 amount,\\n    address indexed distributionAddress\\n  );\\n\\n  /** @notice emitted after each successful ERC20 balance split\\n   *  @param split Address of the split that distributed its balance\\n   *  @param token Address of ERC20 distributed\\n   *  @param amount Amount of ERC20 distributed\\n   *  @param distributionAddress Address to credit distribution fee to\\n   */\\n  event DistributeERC20(\\n    address indexed split,\\n    ERC20 indexed token,\\n    uint256 amount,\\n    address indexed distributionAddress\\n  );\\n\\n  /** @notice emitted after each successful withdrawal\\n   *  @param account Address that funds were withdrawn to\\n   *  @param eth Boolean for whether ETH was distributed\\n   *  @param tokens Addresses of ERC20s distributed\\n   *  @param amounts Amounts of ETH/ERC20 distributed (if ETH was distributed (`eth`),\\n   *  will be first in the array Remaining array matches order of `tokens`)\\n   */\\n  event Withdrawal(\\n    address indexed account,\\n    bool eth,\\n    ERC20[] tokens,\\n    uint256[] amounts\\n  );\\n}\\n\",\"keccak256\":\"0x449f4838f98431dc4ddb83b5c14391142f0f48623ff3e1d00af4b47d12ec7b08\",\"license\":\"GPL-3.0-or-later\"},\"contracts/0xSplits/libraries/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.4;\\n\\n/// @notice create opcode failed\\nerror CreateError();\\n/// @notice create2 opcode failed\\nerror Create2Error();\\n\\nlibrary Clones {\\n  /**\\n   * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`\\n   * except when someone calls `receive()` and then it emits an event matching\\n   * `SplitWallet.ReceiveETH(indexed address, amount)`\\n   * Inspired by OZ & 0age's minimal clone implementations based on eip 1167 found at\\n   * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.3.0/contracts/proxy/Clones.sol\\n   * and https://medium.com/coinmonks/the-more-minimal-proxy-5756ae08ee48\\n   *\\n   * This function uses the create2 opcode and a `salt` to deterministically deploy\\n   * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n   * the clones cannot be deployed twice at the same address.\\n   *\\n   * init: 0x3d605d80600a3d3981f3\\n   * 3d   returndatasize  0\\n   * 605d push1 0x5d      0x5d 0\\n   * 80   dup1            0x5d 0x5d 0\\n   * 600a push1 0x0a      0x0a 0x5d 0x5d 0\\n   * 3d   returndatasize  0 0x0a 0x5d 0x5d 0\\n   * 39   codecopy        0x5d 0                      destOffset offset length     memory[destOffset:destOffset+length] = address(this).code[offset:offset+length]       copy executing contracts bytecode\\n   * 81   dup2            0 0x5d 0\\n   * f3   return          0                           offset length                return memory[offset:offset+length]                                                   returns from this contract call\\n   *\\n   * contract: 0x36603057343d52307f830d2d700a97af574b186c80d40429385d24241565b08a7c559ba283a964d9b160203da23d3df35b3d3d3d3d363d3d37363d73bebebebebebebebebebebebebebebebebebebebe5af43d3d93803e605b57fd5bf3\\n   *     0x000     36       calldatasize      cds\\n   *     0x001     6030     push1 0x30        0x30 cds\\n   * ,=< 0x003     57       jumpi\\n   * |   0x004     34       callvalue         cv\\n   * |   0x005     3d       returndatasize    0 cv\\n   * |   0x006     52       mstore\\n   * |   0x007     30       address           addr\\n   * |   0x008     7f830d.. push32 0x830d..   id addr\\n   * |   0x029     6020     push1 0x20        0x20 id addr\\n   * |   0x02b     3d       returndatasize    0 0x20 id addr\\n   * |   0x02c     a2       log2\\n   * |   0x02d     3d       returndatasize    0\\n   * |   0x02e     3d       returndatasize    0 0\\n   * |   0x02f     f3       return\\n   * `-> 0x030     5b       jumpdest\\n   *     0x031     3d       returndatasize    0\\n   *     0x032     3d       returndatasize    0 0\\n   *     0x033     3d       returndatasize    0 0 0\\n   *     0x034     3d       returndatasize    0 0 0 0\\n   *     0x035     36       calldatasize      cds 0 0 0 0\\n   *     0x036     3d       returndatasize    0 cds 0 0 0 0\\n   *     0x037     3d       returndatasize    0 0 cds 0 0 0 0\\n   *     0x038     37       calldatacopy      0 0 0 0\\n   *     0x039     36       calldatasize      cds 0 0 0 0\\n   *     0x03a     3d       returndatasize    0 cds 0 0 0 0\\n   *     0x03b     73bebe.. push20 0xbebe..   0xbebe 0 cds 0 0 0 0\\n   *     0x050     5a       gas               gas 0xbebe 0 cds 0 0 0 0\\n   *     0x051     f4       delegatecall      suc 0 0\\n   *     0x052     3d       returndatasize    rds suc 0 0\\n   *     0x053     3d       returndatasize    rds rds suc 0 0\\n   *     0x054     93       swap4             0 rds suc 0 rds\\n   *     0x055     80       dup1              0 0 rds suc 0 rds\\n   *     0x056     3e       returndatacopy    suc 0 rds\\n   *     0x057     605b     push1 0x5b        0x5b suc 0 rds\\n   * ,=< 0x059     57       jumpi             0 rds\\n   * |   0x05a     fd       revert\\n   * `-> 0x05b     5b       jumpdest          0 rds\\n   *     0x05c     f3       return\\n   *\\n   */\\n  function clone(address implementation) internal returns (address instance) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(\\n        ptr,\\n        0x3d605d80600a3d3981f336603057343d52307f00000000000000000000000000\\n      )\\n      mstore(\\n        add(ptr, 0x13),\\n        0x830d2d700a97af574b186c80d40429385d24241565b08a7c559ba283a964d9b1\\n      )\\n      mstore(\\n        add(ptr, 0x33),\\n        0x60203da23d3df35b3d3d3d3d363d3d37363d7300000000000000000000000000\\n      )\\n      mstore(add(ptr, 0x46), shl(0x60, implementation))\\n      mstore(\\n        add(ptr, 0x5a),\\n        0x5af43d3d93803e605b57fd5bf300000000000000000000000000000000000000\\n      )\\n      instance := create(0, ptr, 0x67)\\n    }\\n    if (instance == address(0)) revert CreateError();\\n  }\\n\\n  function cloneDeterministic(address implementation, bytes32 salt)\\n    internal\\n    returns (address instance)\\n  {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(\\n        ptr,\\n        0x3d605d80600a3d3981f336603057343d52307f00000000000000000000000000\\n      )\\n      mstore(\\n        add(ptr, 0x13),\\n        0x830d2d700a97af574b186c80d40429385d24241565b08a7c559ba283a964d9b1\\n      )\\n      mstore(\\n        add(ptr, 0x33),\\n        0x60203da23d3df35b3d3d3d3d363d3d37363d7300000000000000000000000000\\n      )\\n      mstore(add(ptr, 0x46), shl(0x60, implementation))\\n      mstore(\\n        add(ptr, 0x5a),\\n        0x5af43d3d93803e605b57fd5bf300000000000000000000000000000000000000\\n      )\\n      instance := create2(0, ptr, 0x67, salt)\\n    }\\n    if (instance == address(0)) revert Create2Error();\\n  }\\n\\n  /**\\n   * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n   */\\n  function predictDeterministicAddress(\\n    address implementation,\\n    bytes32 salt,\\n    address deployer\\n  ) internal pure returns (address predicted) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(\\n        ptr,\\n        0x3d605d80600a3d3981f336603057343d52307f00000000000000000000000000\\n      )\\n      mstore(\\n        add(ptr, 0x13),\\n        0x830d2d700a97af574b186c80d40429385d24241565b08a7c559ba283a964d9b1\\n      )\\n      mstore(\\n        add(ptr, 0x33),\\n        0x60203da23d3df35b3d3d3d3d363d3d37363d7300000000000000000000000000\\n      )\\n      mstore(add(ptr, 0x46), shl(0x60, implementation))\\n      mstore(\\n        add(ptr, 0x5a),\\n        0x5af43d3d93803e605b57fd5bf3ff000000000000000000000000000000000000\\n      )\\n      mstore(add(ptr, 0x68), shl(0x60, deployer))\\n      mstore(add(ptr, 0x7c), salt)\\n      mstore(add(ptr, 0x9c), keccak256(ptr, 0x67))\\n      predicted := keccak256(add(ptr, 0x67), 0x55)\\n    }\\n  }\\n\\n  /**\\n   * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n   */\\n  function predictDeterministicAddress(address implementation, bytes32 salt)\\n    internal\\n    view\\n    returns (address predicted)\\n  {\\n    return predictDeterministicAddress(implementation, salt, address(this));\\n  }\\n}\\n\",\"keccak256\":\"0xb5dcbb1cc134cf221c67dceb9206d4b4037038bd84539073ec0ad2a365e78f81\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162000020906200007a565b604051809103906000f0801580156200003d573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505062000088565b61069f806200499f83390190565b60805160601c6148e3620000bc6000396000818161180101528181611cfe01528181611d2f0152611e7101526148e36000f3fe6080604052600436106101025760003560e01c80637601f78211610095578063c7de644011610064578063c7de644014610376578063d0e4b2f41461039f578063e10e51d6146103c8578063e61cb05e14610405578063ecef0ace1461042e57610109565b80637601f782146102945780638117abc1146102d157806388c662aa146102fc578063c3a8962c1461033957610109565b80631da0b8fc116100d15780631da0b8fc146101b25780633bb66a7b146101ef5780633f26479e1461022c57806352844dd31461025757610109565b80630fec8be31461010e5780631267c6da146101375780631581130214610160578063189cbaa01461018957610109565b3661010957005b600080fd5b34801561011a57600080fd5b5061013560048036038101906101309190613d46565b610457565b005b34801561014357600080fd5b5061015e60048036038101906101599190613b9f565b610651565b005b34801561016c57600080fd5b5061018760048036038101906101829190613dee565b6107d0565b005b34801561019557600080fd5b506101b060048036038101906101ab9190613b9f565b611040565b005b3480156101be57600080fd5b506101d960048036038101906101d49190613b9f565b6112d2565b6040516101e6919061437e565b60405180910390f35b3480156101fb57600080fd5b5061021660048036038101906102119190613b9f565b61131e565b6040516102239190614402565b60405180910390f35b34801561023857600080fd5b50610241611366565b60405161024e9190614402565b60405180910390f35b34801561026357600080fd5b5061027e60048036038101906102799190613ea7565b61136d565b60405161028b919061431c565b60405180910390f35b3480156102a057600080fd5b506102bb60048036038101906102b69190613f30565b611835565b6040516102c8919061431c565b60405180910390f35b3480156102dd57600080fd5b506102e6611e6f565b6040516102f3919061431c565b60405180910390f35b34801561030857600080fd5b50610323600480360381019061031e9190613b9f565b611e93565b604051610330919061431c565b60405180910390f35b34801561034557600080fd5b50610360600480360381019061035b9190613db2565b611eff565b60405161036d9190614402565b60405180910390f35b34801561038257600080fd5b5061039d60048036038101906103989190613b9f565b611f86565b005b3480156103ab57600080fd5b506103c660048036038101906103c19190613bc8565b612216565b005b3480156103d457600080fd5b506103ef60048036038101906103ea9190613b9f565b61243d565b6040516103fc919061431c565b60405180910390f35b34801561041157600080fd5b5061042c60048036038101906104279190613c9f565b6124a9565b005b34801561043a57600080fd5b5061045560048036038101906104509190613c04565b612b89565b005b600083610465576000610468565b60015b60ff169050600083839050820167ffffffffffffffff8111156104b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156104e25781602001602082028036833780820191505090505b509050841561053b576104f486613180565b8160008151811061052e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250505b60005b848490508110156105f4576105a087868684818110610586577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061059b9190613fcb565b613241565b82828501815181106105db577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808060010191505061053e565b508573ffffffffffffffffffffffffffffffffffffffff167f85a3e6062f44efb182fc495a4d92853e74d45c45ed0e4819ca2242d149291adf868686856040516106419493929190614337565b60405180910390a2505050505050565b80600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461072457336040517f8e4a23d600000000000000000000000000000000000000000000000000000000815260040161071b919061431c565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690558173ffffffffffffffffffffffffffffffffffffffff167f6c2460a415b84be3720c209fe02f2cad7a6bcba21e8637afe8957b7ec4b6ef8760405160405180910390a25050565b83838360028351101561081b5782516040517fe8c626500000000000000000000000000000000000000000000000000000000081526004016108129190614402565b60405180910390fd5b815183511461086557825182516040517fb34f351d00000000000000000000000000000000000000000000000000000000815260040161085c92919061441d565b60405180910390fd5b620f42406108728361337f565b63ffffffff16146108c2576108868261337f565b6040517ffcc487c10000000000000000000000000000000000000000000000000000000081526004016108b99190614446565b60405180910390fd5b60006001845103905060005b81811015610a6857846001820181518110610912577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16858281518110610969577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16106109c957806040517fac6bd2330000000000000000000000000000000000000000000000000000000081526004016109c09190614402565b60405180910390fd5b600063ffffffff16848281518110610a0a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff161415610a5b57806040517f0db7e4c7000000000000000000000000000000000000000000000000000000008152600401610a529190614402565b60405180910390fd5b80806001019150506108ce565b50600063ffffffff16838281518110610aaa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff161415610afb57806040517f0db7e4c7000000000000000000000000000000000000000000000000000000008152600401610af29190614402565b60405180910390fd5b50620186a08163ffffffff161115610b4a57806040517f9012de26000000000000000000000000000000000000000000000000000000008152600401610b419190614446565b60405180910390fd5b610b56898888886133f3565b600080600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008a73ffffffffffffffffffffffffffffffffffffffff166370a082318d6040518263ffffffff1660e01b8152600401610c13919061431c565b60206040518083038186803b158015610c2b57600080fd5b505afa158015610c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c639190613ff4565b90506001811115610c7b576002818301039250610c8b565b600182610c88919061465d565b92505b60018214610d155760018060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8673ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff167fb5ee5dc3d2c31a019bbf2c787e0e9c97971c96aceea1c38c12fc8fd25c536d4686604051610d899190614402565b60405180910390a460008863ffffffff1614610e7f576000610db1848a63ffffffff1661348f565b905080600160008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff161415610e2f5733610e31565b8a5b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508084039350505b60008a51905060005b81811015610fb657610ee0858c8381518110610ecd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff1661348f565b600160008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e8481518110610f5a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508080600101915050610e88565b50506001811115611032578b73ffffffffffffffffffffffffffffffffffffffff16637c1f3ffe8c600184036040518363ffffffff1660e01b8152600401610fff929190614399565b600060405180830381600087803b15801561101957600080fd5b505af115801561102d573d6000803e3d6000fd5b505050505b505050505050505050505050565b80600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461111357336040517f8e4a23d600000000000000000000000000000000000000000000000000000000815260040161110a919061431c565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f943d69cf2bbe08a9d44b3c4ce6da17d939d758739370620871ce99a6437866d060405160405180910390a46000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b620f424081565b6000858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508360028351101561143c5782516040517fe8c626500000000000000000000000000000000000000000000000000000000081526004016114339190614402565b60405180910390fd5b815183511461148657825182516040517fb34f351d00000000000000000000000000000000000000000000000000000000815260040161147d92919061441d565b60405180910390fd5b620f42406114938361337f565b63ffffffff16146114e3576114a78261337f565b6040517ffcc487c10000000000000000000000000000000000000000000000000000000081526004016114da9190614446565b60405180910390fd5b60006001845103905060005b8181101561168957846001820181518110611533577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1685828151811061158a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16106115ea57806040517fac6bd2330000000000000000000000000000000000000000000000000000000081526004016115e19190614402565b60405180910390fd5b600063ffffffff1684828151811061162b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff16141561167c57806040517f0db7e4c70000000000000000000000000000000000000000000000000000000081526004016116739190614402565b60405180910390fd5b80806001019150506114ef565b50600063ffffffff168382815181106116cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff16141561171c57806040517f0db7e4c70000000000000000000000000000000000000000000000000000000081526004016117139190614402565b60405180910390fd5b50620186a08163ffffffff16111561176b57806040517f9012de260000000000000000000000000000000000000000000000000000000081526004016117629190614446565b60405180910390fd5b60006117fa8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050898980806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050886134a1565b90506118267f0000000000000000000000000000000000000000000000000000000000000000826134d7565b94505050505095945050505050565b6000868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050846002835110156119045782516040517fe8c626500000000000000000000000000000000000000000000000000000000081526004016118fb9190614402565b60405180910390fd5b815183511461194e57825182516040517fb34f351d00000000000000000000000000000000000000000000000000000000815260040161194592919061441d565b60405180910390fd5b620f424061195b8361337f565b63ffffffff16146119ab5761196f8261337f565b6040517ffcc487c10000000000000000000000000000000000000000000000000000000081526004016119a29190614446565b60405180910390fd5b60006001845103905060005b81811015611b51578460018201815181106119fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16858281518110611a52577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1610611ab257806040517fac6bd233000000000000000000000000000000000000000000000000000000008152600401611aa99190614402565b60405180910390fd5b600063ffffffff16848281518110611af3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff161415611b4457806040517f0db7e4c7000000000000000000000000000000000000000000000000000000008152600401611b3b9190614402565b60405180910390fd5b80806001019150506119b7565b50600063ffffffff16838281518110611b93577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff161415611be457806040517f0db7e4c7000000000000000000000000000000000000000000000000000000008152600401611bdb9190614402565b60405180910390fd5b50620186a08163ffffffff161115611c3357806040517f9012de26000000000000000000000000000000000000000000000000000000008152600401611c2a9190614446565b60405180910390fd5b6000611cc28b8b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050896134a1565b9050600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415611d2a57611d237f0000000000000000000000000000000000000000000000000000000000000000826134ec565b9450611dd7565b611d537f0000000000000000000000000000000000000000000000000000000000000000613606565b945085600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055508473ffffffffffffffffffffffffffffffffffffffff167f8d5f9943c664a3edaf4d3eb18cc5e2c45a7d2dc5869be33d33bbc0fff9bc259060405160405180910390a2505050509695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b80600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461205957336040517f8e4a23d6000000000000000000000000000000000000000000000000000000008152600401612050919061431c565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690553373ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f943d69cf2bbe08a9d44b3c4ce6da17d939d758739370620871ce99a6437866d060405160405180910390a433600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b81600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146122e957336040517f8e4a23d60000000000000000000000000000000000000000000000000000000081526004016122e0919061431c565b60405180910390fd5b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561235c57806040517fc3691307000000000000000000000000000000000000000000000000000000008152600401612353919061431c565b60405180910390fd5b82600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f107cf6ea8668d533df1aab5bb8b6315bb0c25f0b6c955558d09368f290668fc760405160405180910390a350505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8383836002835110156124f45782516040517fe8c626500000000000000000000000000000000000000000000000000000000081526004016124eb9190614402565b60405180910390fd5b815183511461253e57825182516040517fb34f351d00000000000000000000000000000000000000000000000000000000815260040161253592919061441d565b60405180910390fd5b620f424061254b8361337f565b63ffffffff161461259b5761255f8261337f565b6040517ffcc487c10000000000000000000000000000000000000000000000000000000081526004016125929190614446565b60405180910390fd5b60006001845103905060005b81811015612741578460018201815181106125eb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16858281518110612642577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16106126a257806040517fac6bd2330000000000000000000000000000000000000000000000000000000081526004016126999190614402565b60405180910390fd5b600063ffffffff168482815181106126e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff16141561273457806040517f0db7e4c700000000000000000000000000000000000000000000000000000000815260040161272b9190614402565b60405180910390fd5b80806001019150506125a7565b50600063ffffffff16838281518110612783577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff1614156127d457806040517f0db7e4c70000000000000000000000000000000000000000000000000000000081526004016127cb9190614402565b60405180910390fd5b50620186a08163ffffffff16111561282357806040517f9012de2600000000000000000000000000000000000000000000000000000000815260040161281a9190614446565b60405180910390fd5b61282f888888886133f3565b60008060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008973ffffffffffffffffffffffffffffffffffffffff1631905060006001828461289e91906145cd565b6128a8919061465d565b9050600183146128f75760016000808d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8673ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff167f87c3ca0a87d9b82033e4bc55e6d30621f8d7e0c9d8ca7988edfde8932787b77b836040516129549190614402565b60405180910390a360008863ffffffff1614612a0c57600061297c828a63ffffffff1661348f565b9050806000808073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1614156129bc57336129be565b8a5b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508082039150505b60008a51905060005b81811015612b0557612a6d838c8381518110612a5a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff1661348f565b6000808e8481518110612aa9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508080600101915050612a15565b50506000821115612b7c578a73ffffffffffffffffffffffffffffffffffffffff1663ab0ebff4836040518263ffffffff1660e01b8152600401612b499190614402565b600060405180830381600087803b158015612b6357600080fd5b505af1158015612b77573d6000803e3d6000fd5b505050505b5050505050505050505050565b85600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612c5c57336040517f8e4a23d6000000000000000000000000000000000000000000000000000000008152600401612c53919061431c565b60405180910390fd5b858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505083600283511015612d295782516040517fe8c62650000000000000000000000000000000000000000000000000000000008152600401612d209190614402565b60405180910390fd5b8151835114612d7357825182516040517fb34f351d000000000000000000000000000000000000000000000000000000008152600401612d6a92919061441d565b60405180910390fd5b620f4240612d808361337f565b63ffffffff1614612dd057612d948261337f565b6040517ffcc487c1000000000000000000000000000000000000000000000000000000008152600401612dc79190614446565b60405180910390fd5b60006001845103905060005b81811015612f7657846001820181518110612e20577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16858281518110612e77577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1610612ed757806040517fac6bd233000000000000000000000000000000000000000000000000000000008152600401612ece9190614402565b60405180910390fd5b600063ffffffff16848281518110612f18577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff161415612f6957806040517f0db7e4c7000000000000000000000000000000000000000000000000000000008152600401612f609190614402565b60405180910390fd5b8080600101915050612ddc565b50600063ffffffff16838281518110612fb8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff16141561300957806040517f0db7e4c70000000000000000000000000000000000000000000000000000000081526004016130009190614402565b60405180910390fd5b50620186a08163ffffffff16111561305857806040517f9012de2600000000000000000000000000000000000000000000000000000000815260040161304f9190614446565b60405180910390fd5b60006130e78a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050898980806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050886134a1565b905080600260008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055508a73ffffffffffffffffffffffffffffffffffffffff167f45e1e99513dd915ac128b94953ca64c6375717ea1894b3114db08cdca51debd260405160405180910390a25050505050505050505050565b600060016000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546131cd919061465d565b905060016000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061323c818373ffffffffffffffffffffffffffffffffffffffff1661371e90919063ffffffff16565b919050565b600060018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132cb919061465d565b905060018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061337983828473ffffffffffffffffffffffffffffffffffffffff166137719092919063ffffffff16565b92915050565b6000808251905060005b818110156133ec578381815181106133ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151836133dd9190614623565b92508080600101915050613389565b5050919050565b60006134008484846134a1565b905080600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541461348857806040517fdd5ff45700000000000000000000000000000000000000000000000000000000815260040161347f919061437e565b60405180910390fd5b5050505050565b6000620f424082840204905092915050565b60008383836040516020016134b8939291906142e7565b6040516020818303038152906040528051906020012090509392505050565b60006134e4838330613817565b905092915050565b60006040517f3d605d80600a3d3981f336603057343d52307f0000000000000000000000000081527f830d2d700a97af574b186c80d40429385d24241565b08a7c559ba283a964d9b160138201527f60203da23d3df35b3d3d3d3d363d3d37363d730000000000000000000000000060338201528360601b60468201527f5af43d3d93803e605b57fd5bf300000000000000000000000000000000000000605a820152826067826000f5915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613600576040517f380bbe1300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b60006040517f3d605d80600a3d3981f336603057343d52307f0000000000000000000000000081527f830d2d700a97af574b186c80d40429385d24241565b08a7c559ba283a964d9b160138201527f60203da23d3df35b3d3d3d3d363d3d37363d730000000000000000000000000060338201528260601b60468201527f5af43d3d93803e605b57fd5bf300000000000000000000000000000000000000605a8201526067816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613719576040517f985da9b000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b600080600080600085875af190508061376c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613763906143e2565b60405180910390fd5b505050565b60006040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201528260248201526000806044836000895af19150506137d2816138e3565b613811576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613808906143c2565b60405180910390fd5b50505050565b60006040517f3d605d80600a3d3981f336603057343d52307f0000000000000000000000000081527f830d2d700a97af574b186c80d40429385d24241565b08a7c559ba283a964d9b160138201527f60203da23d3df35b3d3d3d3d363d3d37363d730000000000000000000000000060338201528460601b60468201527f5af43d3d93803e605b57fd5bf3ff000000000000000000000000000000000000605a8201528260601b606882015283607c82015260678120609c820152605560678201209150509392505050565b60003d826138f557806000803e806000fd5b806020811461390f57600081146139205760009250613925565b816000803e60005115159250613925565b600192505b5050919050565b600061393f61393a84614486565b614461565b9050808382526020820190508285602086028201111561395e57600080fd5b60005b8581101561398e57816139748882613a04565b845260208401935060208301925050600181019050613961565b5050509392505050565b60006139ab6139a6846144b2565b614461565b905080838252602082019050828560208602820111156139ca57600080fd5b60005b858110156139fa57816139e08882613b8a565b8452602084019350602083019250506001810190506139cd565b5050509392505050565b600081359050613a138161483a565b92915050565b60008083601f840112613a2b57600080fd5b8235905067ffffffffffffffff811115613a4457600080fd5b602083019150836020820283011115613a5c57600080fd5b9250929050565b600082601f830112613a7457600080fd5b8135613a8484826020860161392c565b91505092915050565b60008083601f840112613a9f57600080fd5b8235905067ffffffffffffffff811115613ab857600080fd5b602083019150836020820283011115613ad057600080fd5b9250929050565b60008083601f840112613ae957600080fd5b8235905067ffffffffffffffff811115613b0257600080fd5b602083019150836020820283011115613b1a57600080fd5b9250929050565b600082601f830112613b3257600080fd5b8135613b42848260208601613998565b91505092915050565b600081359050613b5a81614851565b92915050565b600081359050613b6f81614868565b92915050565b600081519050613b848161487f565b92915050565b600081359050613b9981614896565b92915050565b600060208284031215613bb157600080fd5b6000613bbf84828501613a04565b91505092915050565b60008060408385031215613bdb57600080fd5b6000613be985828601613a04565b9250506020613bfa85828601613a04565b9150509250929050565b60008060008060008060808789031215613c1d57600080fd5b6000613c2b89828a01613a04565b965050602087013567ffffffffffffffff811115613c4857600080fd5b613c5489828a01613a19565b9550955050604087013567ffffffffffffffff811115613c7357600080fd5b613c7f89828a01613ad7565b93509350506060613c9289828a01613b8a565b9150509295509295509295565b600080600080600060a08688031215613cb757600080fd5b6000613cc588828901613a04565b955050602086013567ffffffffffffffff811115613ce257600080fd5b613cee88828901613a63565b945050604086013567ffffffffffffffff811115613d0b57600080fd5b613d1788828901613b21565b9350506060613d2888828901613b8a565b9250506080613d3988828901613a04565b9150509295509295909350565b60008060008060608587031215613d5c57600080fd5b6000613d6a87828801613a04565b9450506020613d7b87828801613b4b565b935050604085013567ffffffffffffffff811115613d9857600080fd5b613da487828801613a8d565b925092505092959194509250565b60008060408385031215613dc557600080fd5b6000613dd385828601613a04565b9250506020613de485828601613b60565b9150509250929050565b60008060008060008060c08789031215613e0757600080fd5b6000613e1589828a01613a04565b9650506020613e2689828a01613b60565b955050604087013567ffffffffffffffff811115613e4357600080fd5b613e4f89828a01613a63565b945050606087013567ffffffffffffffff811115613e6c57600080fd5b613e7889828a01613b21565b9350506080613e8989828a01613b8a565b92505060a0613e9a89828a01613a04565b9150509295509295509295565b600080600080600060608688031215613ebf57600080fd5b600086013567ffffffffffffffff811115613ed957600080fd5b613ee588828901613a19565b9550955050602086013567ffffffffffffffff811115613f0457600080fd5b613f1088828901613ad7565b93509350506040613f2388828901613b8a565b9150509295509295909350565b60008060008060008060808789031215613f4957600080fd5b600087013567ffffffffffffffff811115613f6357600080fd5b613f6f89828a01613a19565b9650965050602087013567ffffffffffffffff811115613f8e57600080fd5b613f9a89828a01613ad7565b94509450506040613fad89828a01613b8a565b9250506060613fbe89828a01613a04565b9150509295509295509295565b600060208284031215613fdd57600080fd5b6000613feb84828501613b60565b91505092915050565b60006020828403121561400657600080fd5b600061401484828501613b75565b91505092915050565b6000614029838361408c565b60208301905092915050565b60006140418383614230565b60208301905092915050565b60006140598383614294565b60208301905092915050565b600061407183836142c1565b60208301905092915050565b61408681614691565b82525050565b61409581614691565b82525050565b60006140a682614518565b6140b0818561457e565b93506140bb836144de565b8060005b838110156140ec5781516140d3888261401d565b97506140de83614539565b9250506001810190506140bf565b5085935050505092915050565b6000614105838561456d565b9350614110826144ee565b8060005b858110156141495761412682846145b6565b6141308882614035565b975061413b83614546565b925050600181019050614114565b5085925050509392505050565b600061416182614523565b61416b8185614589565b9350614176836144f8565b8060005b838110156141a757815161418e888261404d565b975061419983614553565b92505060018101905061417a565b5085935050505092915050565b60006141bf8261452e565b6141c9818561459a565b93506141d483614508565b8060005b838110156142055781516141ec8882614065565b97506141f783614560565b9250506001810190506141d8565b5085935050505092915050565b61421b816146a3565b82525050565b61422a816146af565b82525050565b61423981614705565b82525050565b61424881614705565b82525050565b600061425b600f836145a5565b9150614266826147e8565b602082019050919050565b600061427e6013836145a5565b915061428982614811565b602082019050919050565b61429d816146eb565b82525050565b6142ac816146eb565b82525050565b6142bb816146f5565b82525050565b6142ca816146f5565b82525050565b6142e16142dc826146f5565b61475a565b82525050565b60006142f3828661409b565b91506142ff82856141b4565b915061430b82846142d0565b600482019150819050949350505050565b6000602082019050614331600083018461407d565b92915050565b600060608201905061434c6000830187614212565b818103602083015261435f8185876140f9565b905081810360408301526143738184614156565b905095945050505050565b60006020820190506143936000830184614221565b92915050565b60006040820190506143ae600083018561423f565b6143bb60208301846142a3565b9392505050565b600060208201905081810360008301526143db8161424e565b9050919050565b600060208201905081810360008301526143fb81614271565b9050919050565b600060208201905061441760008301846142a3565b92915050565b600060408201905061443260008301856142a3565b61443f60208301846142a3565b9392505050565b600060208201905061445b60008301846142b2565b92915050565b600061446b61447c565b90506144778282614729565b919050565b6000604051905090565b600067ffffffffffffffff8211156144a1576144a061479b565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156144cd576144cc61479b565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006145c56020840184613b60565b905092915050565b60006145d8826146eb565b91506145e3836146eb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156146185761461761476c565b5b828201905092915050565b600061462e826146f5565b9150614639836146f5565b92508263ffffffff038211156146525761465161476c565b5b828201905092915050565b6000614668826146eb565b9150614673836146eb565b9250828210156146865761468561476c565b5b828203905092915050565b600061469c826146cb565b9050919050565b60008115159050919050565b6000819050919050565b60006146c482614691565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600061471082614717565b9050919050565b6000614722826146cb565b9050919050565b614732826147ca565b810181811067ffffffffffffffff821117156147515761475061479b565b5b80604052505050565b6000614765826147db565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160e01b9050919050565b7f5452414e534645525f4641494c45440000000000000000000000000000000000600082015250565b7f4554485f5452414e534645525f4641494c454400000000000000000000000000600082015250565b61484381614691565b811461484e57600080fd5b50565b61485a816146a3565b811461486557600080fd5b50565b614871816146b9565b811461487c57600080fd5b50565b614888816146eb565b811461489357600080fd5b50565b61489f816146f5565b81146148aa57600080fd5b5056fea2646970667358221220def6c4c28030a470f50fd8d469818d45ebf39964392e23bc9e2801218f76877064736f6c6343000804003360a060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060805160601c61061f61008060003960008181609e0152818160c20152818161014a01528181610196015261021f015261061f6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630e769b2b146100465780637c1f3ffe14610064578063ab0ebff414610080575b600080fd5b61004e61009c565b60405161005b919061048b565b60405180910390f35b61007e600480360381019061007991906103d1565b6100c0565b005b61009a6004803603810190610095919061040d565b610194565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610145576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101907f0000000000000000000000000000000000000000000000000000000000000000828473ffffffffffffffffffffffffffffffffffffffff166102659092919063ffffffff16565b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610219576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610262817f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661030b90919063ffffffff16565b50565b60006040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201528260248201526000806044836000895af19150506102c68161035e565b610305576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fc906104a6565b60405180910390fd5b50505050565b600080600080600085875af1905080610359576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610350906104c6565b60405180910390fd5b505050565b60003d8261037057806000803e806000fd5b806020811461038a576000811461039b57600092506103a0565b816000803e600051151592506103a0565b600192505b5050919050565b6000813590506103b6816105bb565b92915050565b6000813590506103cb816105d2565b92915050565b600080604083850312156103e457600080fd5b60006103f2858286016103a7565b9250506020610403858286016103bc565b9150509250929050565b60006020828403121561041f57600080fd5b600061042d848285016103bc565b91505092915050565b61043f81610545565b82525050565b6000610452600f836104e6565b915061045d82610569565b602082019050919050565b60006104756013836104e6565b915061048082610592565b602082019050919050565b60006020820190506104a06000830184610436565b92915050565b600060208201905081810360008301526104bf81610445565b9050919050565b600060208201905081810360008301526104df81610468565b9050919050565b600082825260208201905092915050565b60006105028261051b565b9050919050565b6000610514826104f7565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061055082610557565b9050919050565b60006105628261051b565b9050919050565b7f5452414e534645525f4641494c45440000000000000000000000000000000000600082015250565b7f4554485f5452414e534645525f4641494c454400000000000000000000000000600082015250565b6105c481610509565b81146105cf57600080fd5b50565b6105db8161053b565b81146105e657600080fd5b5056fea26469706673582212203f6b702ba23745ed2fcb2c77192248253b8205d0e51c8ada030b16535c2bab9764736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101025760003560e01c80637601f78211610095578063c7de644011610064578063c7de644014610376578063d0e4b2f41461039f578063e10e51d6146103c8578063e61cb05e14610405578063ecef0ace1461042e57610109565b80637601f782146102945780638117abc1146102d157806388c662aa146102fc578063c3a8962c1461033957610109565b80631da0b8fc116100d15780631da0b8fc146101b25780633bb66a7b146101ef5780633f26479e1461022c57806352844dd31461025757610109565b80630fec8be31461010e5780631267c6da146101375780631581130214610160578063189cbaa01461018957610109565b3661010957005b600080fd5b34801561011a57600080fd5b5061013560048036038101906101309190613d46565b610457565b005b34801561014357600080fd5b5061015e60048036038101906101599190613b9f565b610651565b005b34801561016c57600080fd5b5061018760048036038101906101829190613dee565b6107d0565b005b34801561019557600080fd5b506101b060048036038101906101ab9190613b9f565b611040565b005b3480156101be57600080fd5b506101d960048036038101906101d49190613b9f565b6112d2565b6040516101e6919061437e565b60405180910390f35b3480156101fb57600080fd5b5061021660048036038101906102119190613b9f565b61131e565b6040516102239190614402565b60405180910390f35b34801561023857600080fd5b50610241611366565b60405161024e9190614402565b60405180910390f35b34801561026357600080fd5b5061027e60048036038101906102799190613ea7565b61136d565b60405161028b919061431c565b60405180910390f35b3480156102a057600080fd5b506102bb60048036038101906102b69190613f30565b611835565b6040516102c8919061431c565b60405180910390f35b3480156102dd57600080fd5b506102e6611e6f565b6040516102f3919061431c565b60405180910390f35b34801561030857600080fd5b50610323600480360381019061031e9190613b9f565b611e93565b604051610330919061431c565b60405180910390f35b34801561034557600080fd5b50610360600480360381019061035b9190613db2565b611eff565b60405161036d9190614402565b60405180910390f35b34801561038257600080fd5b5061039d60048036038101906103989190613b9f565b611f86565b005b3480156103ab57600080fd5b506103c660048036038101906103c19190613bc8565b612216565b005b3480156103d457600080fd5b506103ef60048036038101906103ea9190613b9f565b61243d565b6040516103fc919061431c565b60405180910390f35b34801561041157600080fd5b5061042c60048036038101906104279190613c9f565b6124a9565b005b34801561043a57600080fd5b5061045560048036038101906104509190613c04565b612b89565b005b600083610465576000610468565b60015b60ff169050600083839050820167ffffffffffffffff8111156104b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156104e25781602001602082028036833780820191505090505b509050841561053b576104f486613180565b8160008151811061052e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250505b60005b848490508110156105f4576105a087868684818110610586577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061059b9190613fcb565b613241565b82828501815181106105db577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808060010191505061053e565b508573ffffffffffffffffffffffffffffffffffffffff167f85a3e6062f44efb182fc495a4d92853e74d45c45ed0e4819ca2242d149291adf868686856040516106419493929190614337565b60405180910390a2505050505050565b80600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461072457336040517f8e4a23d600000000000000000000000000000000000000000000000000000000815260040161071b919061431c565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690558173ffffffffffffffffffffffffffffffffffffffff167f6c2460a415b84be3720c209fe02f2cad7a6bcba21e8637afe8957b7ec4b6ef8760405160405180910390a25050565b83838360028351101561081b5782516040517fe8c626500000000000000000000000000000000000000000000000000000000081526004016108129190614402565b60405180910390fd5b815183511461086557825182516040517fb34f351d00000000000000000000000000000000000000000000000000000000815260040161085c92919061441d565b60405180910390fd5b620f42406108728361337f565b63ffffffff16146108c2576108868261337f565b6040517ffcc487c10000000000000000000000000000000000000000000000000000000081526004016108b99190614446565b60405180910390fd5b60006001845103905060005b81811015610a6857846001820181518110610912577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16858281518110610969577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16106109c957806040517fac6bd2330000000000000000000000000000000000000000000000000000000081526004016109c09190614402565b60405180910390fd5b600063ffffffff16848281518110610a0a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff161415610a5b57806040517f0db7e4c7000000000000000000000000000000000000000000000000000000008152600401610a529190614402565b60405180910390fd5b80806001019150506108ce565b50600063ffffffff16838281518110610aaa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff161415610afb57806040517f0db7e4c7000000000000000000000000000000000000000000000000000000008152600401610af29190614402565b60405180910390fd5b50620186a08163ffffffff161115610b4a57806040517f9012de26000000000000000000000000000000000000000000000000000000008152600401610b419190614446565b60405180910390fd5b610b56898888886133f3565b600080600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008a73ffffffffffffffffffffffffffffffffffffffff166370a082318d6040518263ffffffff1660e01b8152600401610c13919061431c565b60206040518083038186803b158015610c2b57600080fd5b505afa158015610c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c639190613ff4565b90506001811115610c7b576002818301039250610c8b565b600182610c88919061465d565b92505b60018214610d155760018060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8673ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff167fb5ee5dc3d2c31a019bbf2c787e0e9c97971c96aceea1c38c12fc8fd25c536d4686604051610d899190614402565b60405180910390a460008863ffffffff1614610e7f576000610db1848a63ffffffff1661348f565b905080600160008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff161415610e2f5733610e31565b8a5b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508084039350505b60008a51905060005b81811015610fb657610ee0858c8381518110610ecd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff1661348f565b600160008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e8481518110610f5a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508080600101915050610e88565b50506001811115611032578b73ffffffffffffffffffffffffffffffffffffffff16637c1f3ffe8c600184036040518363ffffffff1660e01b8152600401610fff929190614399565b600060405180830381600087803b15801561101957600080fd5b505af115801561102d573d6000803e3d6000fd5b505050505b505050505050505050505050565b80600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461111357336040517f8e4a23d600000000000000000000000000000000000000000000000000000000815260040161110a919061431c565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f943d69cf2bbe08a9d44b3c4ce6da17d939d758739370620871ce99a6437866d060405160405180910390a46000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b620f424081565b6000858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508360028351101561143c5782516040517fe8c626500000000000000000000000000000000000000000000000000000000081526004016114339190614402565b60405180910390fd5b815183511461148657825182516040517fb34f351d00000000000000000000000000000000000000000000000000000000815260040161147d92919061441d565b60405180910390fd5b620f42406114938361337f565b63ffffffff16146114e3576114a78261337f565b6040517ffcc487c10000000000000000000000000000000000000000000000000000000081526004016114da9190614446565b60405180910390fd5b60006001845103905060005b8181101561168957846001820181518110611533577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1685828151811061158a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16106115ea57806040517fac6bd2330000000000000000000000000000000000000000000000000000000081526004016115e19190614402565b60405180910390fd5b600063ffffffff1684828151811061162b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff16141561167c57806040517f0db7e4c70000000000000000000000000000000000000000000000000000000081526004016116739190614402565b60405180910390fd5b80806001019150506114ef565b50600063ffffffff168382815181106116cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff16141561171c57806040517f0db7e4c70000000000000000000000000000000000000000000000000000000081526004016117139190614402565b60405180910390fd5b50620186a08163ffffffff16111561176b57806040517f9012de260000000000000000000000000000000000000000000000000000000081526004016117629190614446565b60405180910390fd5b60006117fa8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050898980806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050886134a1565b90506118267f0000000000000000000000000000000000000000000000000000000000000000826134d7565b94505050505095945050505050565b6000868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050846002835110156119045782516040517fe8c626500000000000000000000000000000000000000000000000000000000081526004016118fb9190614402565b60405180910390fd5b815183511461194e57825182516040517fb34f351d00000000000000000000000000000000000000000000000000000000815260040161194592919061441d565b60405180910390fd5b620f424061195b8361337f565b63ffffffff16146119ab5761196f8261337f565b6040517ffcc487c10000000000000000000000000000000000000000000000000000000081526004016119a29190614446565b60405180910390fd5b60006001845103905060005b81811015611b51578460018201815181106119fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16858281518110611a52577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1610611ab257806040517fac6bd233000000000000000000000000000000000000000000000000000000008152600401611aa99190614402565b60405180910390fd5b600063ffffffff16848281518110611af3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff161415611b4457806040517f0db7e4c7000000000000000000000000000000000000000000000000000000008152600401611b3b9190614402565b60405180910390fd5b80806001019150506119b7565b50600063ffffffff16838281518110611b93577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff161415611be457806040517f0db7e4c7000000000000000000000000000000000000000000000000000000008152600401611bdb9190614402565b60405180910390fd5b50620186a08163ffffffff161115611c3357806040517f9012de26000000000000000000000000000000000000000000000000000000008152600401611c2a9190614446565b60405180910390fd5b6000611cc28b8b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050896134a1565b9050600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415611d2a57611d237f0000000000000000000000000000000000000000000000000000000000000000826134ec565b9450611dd7565b611d537f0000000000000000000000000000000000000000000000000000000000000000613606565b945085600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055508473ffffffffffffffffffffffffffffffffffffffff167f8d5f9943c664a3edaf4d3eb18cc5e2c45a7d2dc5869be33d33bbc0fff9bc259060405160405180910390a2505050509695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b80600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461205957336040517f8e4a23d6000000000000000000000000000000000000000000000000000000008152600401612050919061431c565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690553373ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f943d69cf2bbe08a9d44b3c4ce6da17d939d758739370620871ce99a6437866d060405160405180910390a433600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b81600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146122e957336040517f8e4a23d60000000000000000000000000000000000000000000000000000000081526004016122e0919061431c565b60405180910390fd5b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561235c57806040517fc3691307000000000000000000000000000000000000000000000000000000008152600401612353919061431c565b60405180910390fd5b82600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f107cf6ea8668d533df1aab5bb8b6315bb0c25f0b6c955558d09368f290668fc760405160405180910390a350505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8383836002835110156124f45782516040517fe8c626500000000000000000000000000000000000000000000000000000000081526004016124eb9190614402565b60405180910390fd5b815183511461253e57825182516040517fb34f351d00000000000000000000000000000000000000000000000000000000815260040161253592919061441d565b60405180910390fd5b620f424061254b8361337f565b63ffffffff161461259b5761255f8261337f565b6040517ffcc487c10000000000000000000000000000000000000000000000000000000081526004016125929190614446565b60405180910390fd5b60006001845103905060005b81811015612741578460018201815181106125eb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16858281518110612642577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16106126a257806040517fac6bd2330000000000000000000000000000000000000000000000000000000081526004016126999190614402565b60405180910390fd5b600063ffffffff168482815181106126e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff16141561273457806040517f0db7e4c700000000000000000000000000000000000000000000000000000000815260040161272b9190614402565b60405180910390fd5b80806001019150506125a7565b50600063ffffffff16838281518110612783577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff1614156127d457806040517f0db7e4c70000000000000000000000000000000000000000000000000000000081526004016127cb9190614402565b60405180910390fd5b50620186a08163ffffffff16111561282357806040517f9012de2600000000000000000000000000000000000000000000000000000000815260040161281a9190614446565b60405180910390fd5b61282f888888886133f3565b60008060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008973ffffffffffffffffffffffffffffffffffffffff1631905060006001828461289e91906145cd565b6128a8919061465d565b9050600183146128f75760016000808d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8673ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff167f87c3ca0a87d9b82033e4bc55e6d30621f8d7e0c9d8ca7988edfde8932787b77b836040516129549190614402565b60405180910390a360008863ffffffff1614612a0c57600061297c828a63ffffffff1661348f565b9050806000808073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1614156129bc57336129be565b8a5b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508082039150505b60008a51905060005b81811015612b0557612a6d838c8381518110612a5a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff1661348f565b6000808e8481518110612aa9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508080600101915050612a15565b50506000821115612b7c578a73ffffffffffffffffffffffffffffffffffffffff1663ab0ebff4836040518263ffffffff1660e01b8152600401612b499190614402565b600060405180830381600087803b158015612b6357600080fd5b505af1158015612b77573d6000803e3d6000fd5b505050505b5050505050505050505050565b85600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612c5c57336040517f8e4a23d6000000000000000000000000000000000000000000000000000000008152600401612c53919061431c565b60405180910390fd5b858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505083600283511015612d295782516040517fe8c62650000000000000000000000000000000000000000000000000000000008152600401612d209190614402565b60405180910390fd5b8151835114612d7357825182516040517fb34f351d000000000000000000000000000000000000000000000000000000008152600401612d6a92919061441d565b60405180910390fd5b620f4240612d808361337f565b63ffffffff1614612dd057612d948261337f565b6040517ffcc487c1000000000000000000000000000000000000000000000000000000008152600401612dc79190614446565b60405180910390fd5b60006001845103905060005b81811015612f7657846001820181518110612e20577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16858281518110612e77577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1610612ed757806040517fac6bd233000000000000000000000000000000000000000000000000000000008152600401612ece9190614402565b60405180910390fd5b600063ffffffff16848281518110612f18577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff161415612f6957806040517f0db7e4c7000000000000000000000000000000000000000000000000000000008152600401612f609190614402565b60405180910390fd5b8080600101915050612ddc565b50600063ffffffff16838281518110612fb8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff16141561300957806040517f0db7e4c70000000000000000000000000000000000000000000000000000000081526004016130009190614402565b60405180910390fd5b50620186a08163ffffffff16111561305857806040517f9012de2600000000000000000000000000000000000000000000000000000000815260040161304f9190614446565b60405180910390fd5b60006130e78a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050898980806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050886134a1565b905080600260008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055508a73ffffffffffffffffffffffffffffffffffffffff167f45e1e99513dd915ac128b94953ca64c6375717ea1894b3114db08cdca51debd260405160405180910390a25050505050505050505050565b600060016000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546131cd919061465d565b905060016000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061323c818373ffffffffffffffffffffffffffffffffffffffff1661371e90919063ffffffff16565b919050565b600060018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132cb919061465d565b905060018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061337983828473ffffffffffffffffffffffffffffffffffffffff166137719092919063ffffffff16565b92915050565b6000808251905060005b818110156133ec578381815181106133ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151836133dd9190614623565b92508080600101915050613389565b5050919050565b60006134008484846134a1565b905080600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541461348857806040517fdd5ff45700000000000000000000000000000000000000000000000000000000815260040161347f919061437e565b60405180910390fd5b5050505050565b6000620f424082840204905092915050565b60008383836040516020016134b8939291906142e7565b6040516020818303038152906040528051906020012090509392505050565b60006134e4838330613817565b905092915050565b60006040517f3d605d80600a3d3981f336603057343d52307f0000000000000000000000000081527f830d2d700a97af574b186c80d40429385d24241565b08a7c559ba283a964d9b160138201527f60203da23d3df35b3d3d3d3d363d3d37363d730000000000000000000000000060338201528360601b60468201527f5af43d3d93803e605b57fd5bf300000000000000000000000000000000000000605a820152826067826000f5915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613600576040517f380bbe1300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b60006040517f3d605d80600a3d3981f336603057343d52307f0000000000000000000000000081527f830d2d700a97af574b186c80d40429385d24241565b08a7c559ba283a964d9b160138201527f60203da23d3df35b3d3d3d3d363d3d37363d730000000000000000000000000060338201528260601b60468201527f5af43d3d93803e605b57fd5bf300000000000000000000000000000000000000605a8201526067816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613719576040517f985da9b000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b600080600080600085875af190508061376c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613763906143e2565b60405180910390fd5b505050565b60006040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201528260248201526000806044836000895af19150506137d2816138e3565b613811576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613808906143c2565b60405180910390fd5b50505050565b60006040517f3d605d80600a3d3981f336603057343d52307f0000000000000000000000000081527f830d2d700a97af574b186c80d40429385d24241565b08a7c559ba283a964d9b160138201527f60203da23d3df35b3d3d3d3d363d3d37363d730000000000000000000000000060338201528460601b60468201527f5af43d3d93803e605b57fd5bf3ff000000000000000000000000000000000000605a8201528260601b606882015283607c82015260678120609c820152605560678201209150509392505050565b60003d826138f557806000803e806000fd5b806020811461390f57600081146139205760009250613925565b816000803e60005115159250613925565b600192505b5050919050565b600061393f61393a84614486565b614461565b9050808382526020820190508285602086028201111561395e57600080fd5b60005b8581101561398e57816139748882613a04565b845260208401935060208301925050600181019050613961565b5050509392505050565b60006139ab6139a6846144b2565b614461565b905080838252602082019050828560208602820111156139ca57600080fd5b60005b858110156139fa57816139e08882613b8a565b8452602084019350602083019250506001810190506139cd565b5050509392505050565b600081359050613a138161483a565b92915050565b60008083601f840112613a2b57600080fd5b8235905067ffffffffffffffff811115613a4457600080fd5b602083019150836020820283011115613a5c57600080fd5b9250929050565b600082601f830112613a7457600080fd5b8135613a8484826020860161392c565b91505092915050565b60008083601f840112613a9f57600080fd5b8235905067ffffffffffffffff811115613ab857600080fd5b602083019150836020820283011115613ad057600080fd5b9250929050565b60008083601f840112613ae957600080fd5b8235905067ffffffffffffffff811115613b0257600080fd5b602083019150836020820283011115613b1a57600080fd5b9250929050565b600082601f830112613b3257600080fd5b8135613b42848260208601613998565b91505092915050565b600081359050613b5a81614851565b92915050565b600081359050613b6f81614868565b92915050565b600081519050613b848161487f565b92915050565b600081359050613b9981614896565b92915050565b600060208284031215613bb157600080fd5b6000613bbf84828501613a04565b91505092915050565b60008060408385031215613bdb57600080fd5b6000613be985828601613a04565b9250506020613bfa85828601613a04565b9150509250929050565b60008060008060008060808789031215613c1d57600080fd5b6000613c2b89828a01613a04565b965050602087013567ffffffffffffffff811115613c4857600080fd5b613c5489828a01613a19565b9550955050604087013567ffffffffffffffff811115613c7357600080fd5b613c7f89828a01613ad7565b93509350506060613c9289828a01613b8a565b9150509295509295509295565b600080600080600060a08688031215613cb757600080fd5b6000613cc588828901613a04565b955050602086013567ffffffffffffffff811115613ce257600080fd5b613cee88828901613a63565b945050604086013567ffffffffffffffff811115613d0b57600080fd5b613d1788828901613b21565b9350506060613d2888828901613b8a565b9250506080613d3988828901613a04565b9150509295509295909350565b60008060008060608587031215613d5c57600080fd5b6000613d6a87828801613a04565b9450506020613d7b87828801613b4b565b935050604085013567ffffffffffffffff811115613d9857600080fd5b613da487828801613a8d565b925092505092959194509250565b60008060408385031215613dc557600080fd5b6000613dd385828601613a04565b9250506020613de485828601613b60565b9150509250929050565b60008060008060008060c08789031215613e0757600080fd5b6000613e1589828a01613a04565b9650506020613e2689828a01613b60565b955050604087013567ffffffffffffffff811115613e4357600080fd5b613e4f89828a01613a63565b945050606087013567ffffffffffffffff811115613e6c57600080fd5b613e7889828a01613b21565b9350506080613e8989828a01613b8a565b92505060a0613e9a89828a01613a04565b9150509295509295509295565b600080600080600060608688031215613ebf57600080fd5b600086013567ffffffffffffffff811115613ed957600080fd5b613ee588828901613a19565b9550955050602086013567ffffffffffffffff811115613f0457600080fd5b613f1088828901613ad7565b93509350506040613f2388828901613b8a565b9150509295509295909350565b60008060008060008060808789031215613f4957600080fd5b600087013567ffffffffffffffff811115613f6357600080fd5b613f6f89828a01613a19565b9650965050602087013567ffffffffffffffff811115613f8e57600080fd5b613f9a89828a01613ad7565b94509450506040613fad89828a01613b8a565b9250506060613fbe89828a01613a04565b9150509295509295509295565b600060208284031215613fdd57600080fd5b6000613feb84828501613b60565b91505092915050565b60006020828403121561400657600080fd5b600061401484828501613b75565b91505092915050565b6000614029838361408c565b60208301905092915050565b60006140418383614230565b60208301905092915050565b60006140598383614294565b60208301905092915050565b600061407183836142c1565b60208301905092915050565b61408681614691565b82525050565b61409581614691565b82525050565b60006140a682614518565b6140b0818561457e565b93506140bb836144de565b8060005b838110156140ec5781516140d3888261401d565b97506140de83614539565b9250506001810190506140bf565b5085935050505092915050565b6000614105838561456d565b9350614110826144ee565b8060005b858110156141495761412682846145b6565b6141308882614035565b975061413b83614546565b925050600181019050614114565b5085925050509392505050565b600061416182614523565b61416b8185614589565b9350614176836144f8565b8060005b838110156141a757815161418e888261404d565b975061419983614553565b92505060018101905061417a565b5085935050505092915050565b60006141bf8261452e565b6141c9818561459a565b93506141d483614508565b8060005b838110156142055781516141ec8882614065565b97506141f783614560565b9250506001810190506141d8565b5085935050505092915050565b61421b816146a3565b82525050565b61422a816146af565b82525050565b61423981614705565b82525050565b61424881614705565b82525050565b600061425b600f836145a5565b9150614266826147e8565b602082019050919050565b600061427e6013836145a5565b915061428982614811565b602082019050919050565b61429d816146eb565b82525050565b6142ac816146eb565b82525050565b6142bb816146f5565b82525050565b6142ca816146f5565b82525050565b6142e16142dc826146f5565b61475a565b82525050565b60006142f3828661409b565b91506142ff82856141b4565b915061430b82846142d0565b600482019150819050949350505050565b6000602082019050614331600083018461407d565b92915050565b600060608201905061434c6000830187614212565b818103602083015261435f8185876140f9565b905081810360408301526143738184614156565b905095945050505050565b60006020820190506143936000830184614221565b92915050565b60006040820190506143ae600083018561423f565b6143bb60208301846142a3565b9392505050565b600060208201905081810360008301526143db8161424e565b9050919050565b600060208201905081810360008301526143fb81614271565b9050919050565b600060208201905061441760008301846142a3565b92915050565b600060408201905061443260008301856142a3565b61443f60208301846142a3565b9392505050565b600060208201905061445b60008301846142b2565b92915050565b600061446b61447c565b90506144778282614729565b919050565b6000604051905090565b600067ffffffffffffffff8211156144a1576144a061479b565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156144cd576144cc61479b565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006145c56020840184613b60565b905092915050565b60006145d8826146eb565b91506145e3836146eb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156146185761461761476c565b5b828201905092915050565b600061462e826146f5565b9150614639836146f5565b92508263ffffffff038211156146525761465161476c565b5b828201905092915050565b6000614668826146eb565b9150614673836146eb565b9250828210156146865761468561476c565b5b828203905092915050565b600061469c826146cb565b9050919050565b60008115159050919050565b6000819050919050565b60006146c482614691565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600061471082614717565b9050919050565b6000614722826146cb565b9050919050565b614732826147ca565b810181811067ffffffffffffffff821117156147515761475061479b565b5b80604052505050565b6000614765826147db565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160e01b9050919050565b7f5452414e534645525f4641494c45440000000000000000000000000000000000600082015250565b7f4554485f5452414e534645525f4641494c454400000000000000000000000000600082015250565b61484381614691565b811461484e57600080fd5b50565b61485a816146a3565b811461486557600080fd5b50565b614871816146b9565b811461487c57600080fd5b50565b614888816146eb565b811461489357600080fd5b50565b61489f816146f5565b81146148aa57600080fd5b5056fea2646970667358221220def6c4c28030a470f50fd8d469818d45ebf39964392e23bc9e2801218f76877064736f6c63430008040033",
  "devdoc": {
    "author": "0xSplits <will@0xSplits.xyz>",
    "details": "Split recipients, ownerships, and keeper fees are stored onchain as calldata & re-passed as args / validated via hashing when needed. Each split gets its own address & proxy for maximum composability with other contracts onchain. For these proxies, we extended EIP-1167 Minimal Proxy Contract to avoid `DELEGATECALL` inside `receive()` to accept hard gas-capped `sends` & `transfers`.",
    "errors": {
      "InvalidNewController(address)": [
        {
          "params": {
            "newController": "Invalid new controller"
          }
        }
      ],
      "InvalidSplit__AccountsAndAllocationsMismatch(uint256,uint256)": [
        {
          "params": {
            "accountsLength": "Length of accounts array",
            "allocationsLength": "Length of percentAllocations array"
          }
        }
      ],
      "InvalidSplit__AccountsOutOfOrder(uint256)": [
        {
          "params": {
            "index": "Index of out-of-order account"
          }
        }
      ],
      "InvalidSplit__AllocationMustBePositive(uint256)": [
        {
          "params": {
            "index": "Index of zero percentAllocation"
          }
        }
      ],
      "InvalidSplit__InvalidAllocationsSum(uint32)": [
        {
          "params": {
            "allocationsSum": "Sum of percentAllocations array"
          }
        }
      ],
      "InvalidSplit__InvalidDistributionFee(uint32)": [
        {
          "params": {
            "distributionFee": "Invalid distributionFee amount"
          }
        }
      ],
      "InvalidSplit__InvalidHash(bytes32)": [
        {
          "params": {
            "hash": "Invalid hash"
          }
        }
      ],
      "InvalidSplit__TooFewAccounts(uint256)": [
        {
          "params": {
            "accountsLength": "Length of accounts array"
          }
        }
      ],
      "Unauthorized(address)": [
        {
          "params": {
            "sender": "Transaction sender"
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "acceptControl(address)": {
        "params": {
          "split": "Address of mutable split to accept control transfer for"
        }
      },
      "cancelControlTransfer(address)": {
        "params": {
          "split": "Address of mutable split to cancel control transfer for"
        }
      },
      "createSplit(address[],uint32[],uint32,address)": {
        "params": {
          "accounts": "Ordered, unique list of addresses with ownership in the split",
          "controller": "Controlling address (0x0 if immutable)",
          "distributionFee": "Keeper fee paid by split to cover gas costs of distribution",
          "percentAllocations": "Percent allocations associated with each address"
        },
        "returns": {
          "split": "Address of newly created split"
        }
      },
      "distributeERC20(address,address,address[],uint32[],uint32,address)": {
        "details": "`accounts`, `percentAllocations`, and `distributionFee` are verified by hashing  & comparing to the hash in storage associated with split `split`pernicious ERC20s may cause overflow in this function inside  _scaleAmountByPercentage, but results do not affect ETH & other ERC20 balances",
        "params": {
          "accounts": "Ordered, unique list of addresses with ownership in the split",
          "distributionAddress": "Address to pay `distributionFee` to",
          "distributionFee": "Keeper fee paid by split to cover gas costs of distribution",
          "percentAllocations": "Percent allocations associated with each address",
          "split": "Address of split to distribute balance for",
          "token": "Address of ERC20 to distribute balance for"
        }
      },
      "distributeETH(address,address[],uint32[],uint32,address)": {
        "details": "`accounts`, `percentAllocations`, and `distributionFee` are verified by hashing  & comparing to the hash in storage associated with split `split`",
        "params": {
          "accounts": "Ordered, unique list of addresses with ownership in the split",
          "distributionAddress": "Address to pay `distributionFee` to",
          "distributionFee": "Keeper fee paid by split to cover gas costs of distribution",
          "percentAllocations": "Percent allocations associated with each address",
          "split": "Address of split to distribute balance for"
        }
      },
      "getController(address)": {
        "params": {
          "split": "Split to return controller for"
        },
        "returns": {
          "_0": "Split's controller"
        }
      },
      "getERC20Balance(address,address)": {
        "params": {
          "account": "Account to return ERC20 `token` balance for",
          "token": "Token to return balance for"
        },
        "returns": {
          "_0": "Account's balance of `token`"
        }
      },
      "getETHBalance(address)": {
        "params": {
          "account": "Account to return ETH balance for"
        },
        "returns": {
          "_0": "Account's balance of ETH"
        }
      },
      "getHash(address)": {
        "params": {
          "split": "Split to return hash for"
        },
        "returns": {
          "_0": "Split's hash"
        }
      },
      "getNewPotentialController(address)": {
        "params": {
          "split": "Split to return newPotentialController for"
        },
        "returns": {
          "_0": "Split's newPotentialController"
        }
      },
      "makeSplitImmutable(address)": {
        "params": {
          "split": "Address of mutable split to turn immutable"
        }
      },
      "predictImmutableSplitAddress(address[],uint32[],uint32)": {
        "params": {
          "accounts": "Ordered, unique list of addresses with ownership in the split",
          "distributionFee": "Keeper fee paid by split to cover gas costs of distribution",
          "percentAllocations": "Percent allocations associated with each address"
        },
        "returns": {
          "split": "Predicted address of such an immutable split"
        }
      },
      "transferControl(address,address)": {
        "details": "Two-step control transfer inspired by [dharma](https://github.com/dharma-eng/dharma-smart-wallet/blob/master/contracts/helpers/TwoStepOwnable.sol)",
        "params": {
          "newController": "Address to begin transferring control to",
          "split": "Address of mutable split to transfer control for"
        }
      },
      "updateSplit(address,address[],uint32[],uint32)": {
        "params": {
          "accounts": "Ordered, unique list of addresses with ownership in the split",
          "distributionFee": "Keeper fee paid by split to cover gas costs of distribution",
          "percentAllocations": "Percent allocations associated with each address",
          "split": "Address of mutable split to update"
        }
      },
      "withdraw(address,bool,address[])": {
        "params": {
          "account": "Address to withdraw on behalf of",
          "eth": "Bool of whether to withdraw ETH",
          "tokens": "Addresses of ERC20s to withdraw for"
        }
      }
    },
    "title": "SplitMain",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "Create2Error()": [
        {
          "notice": "create2 opcode failed"
        }
      ],
      "CreateError()": [
        {
          "notice": "create opcode failed"
        }
      ],
      "InvalidNewController(address)": [
        {
          "notice": "Invalid new controlling address `newController` for mutable split"
        }
      ],
      "InvalidSplit__AccountsAndAllocationsMismatch(uint256,uint256)": [
        {
          "notice": "Array lengths of accounts & percentAllocations don't match (`accountsLength` != `allocationsLength`)"
        }
      ],
      "InvalidSplit__AccountsOutOfOrder(uint256)": [
        {
          "notice": "Invalid accounts ordering at `index`"
        }
      ],
      "InvalidSplit__AllocationMustBePositive(uint256)": [
        {
          "notice": "Invalid percentAllocation of zero at `index`"
        }
      ],
      "InvalidSplit__InvalidAllocationsSum(uint32)": [
        {
          "notice": "Invalid percentAllocations sum `allocationsSum` must equal `PERCENTAGE_SCALE`"
        }
      ],
      "InvalidSplit__InvalidDistributionFee(uint32)": [
        {
          "notice": "Invalid distributionFee `distributionFee` cannot be greater than 10% (1e5)"
        }
      ],
      "InvalidSplit__InvalidHash(bytes32)": [
        {
          "notice": "Invalid hash `hash` from split data (accounts, percentAllocations, distributionFee)"
        }
      ],
      "InvalidSplit__TooFewAccounts(uint256)": [
        {
          "notice": "Invalid number of accounts `accountsLength`, must have at least 2"
        }
      ],
      "Unauthorized(address)": [
        {
          "notice": "Unauthorized sender `sender`"
        }
      ]
    },
    "events": {
      "CancelControlTransfer(address)": {
        "notice": "emitted after each canceled split control transfer"
      },
      "ControlTransfer(address,address,address)": {
        "notice": "emitted after each successful split control transfer"
      },
      "CreateSplit(address)": {
        "notice": "emitted after each successful split creation"
      },
      "DistributeERC20(address,address,uint256,address)": {
        "notice": "emitted after each successful ERC20 balance split"
      },
      "DistributeETH(address,uint256,address)": {
        "notice": "emitted after each successful ETH balance split"
      },
      "InitiateControlTransfer(address,address)": {
        "notice": "emitted after each initiated split control transfer"
      },
      "UpdateSplit(address)": {
        "notice": "emitted after each successful split update"
      },
      "Withdrawal(address,bool,address[],uint256[])": {
        "notice": "emitted after each successful withdrawal"
      }
    },
    "kind": "user",
    "methods": {
      "PERCENTAGE_SCALE()": {
        "notice": "constant to scale uints into percentages (1e6 == 100%)"
      },
      "acceptControl(address)": {
        "notice": "Accepts transfer of the controlling address of mutable split `split`"
      },
      "cancelControlTransfer(address)": {
        "notice": "Cancels transfer of the controlling address of mutable split `split`"
      },
      "constructor": {
        "notice": "CONSTRUCTOR"
      },
      "createSplit(address[],uint32[],uint32,address)": {
        "notice": "Creates a new split with recipients `accounts` with ownerships `percentAllocations`, a keeper fee for splitting of `distributionFee` and the controlling address `controller`"
      },
      "distributeERC20(address,address,address[],uint32[],uint32,address)": {
        "notice": "Distributes the ERC20 `token` balance for split `split`"
      },
      "distributeETH(address,address[],uint32[],uint32,address)": {
        "notice": "Distributes the ETH balance for split `split`"
      },
      "getController(address)": {
        "notice": "Returns the current controller of split `split`"
      },
      "getERC20Balance(address,address)": {
        "notice": "Returns the ERC20 balance of token `token` for account `account`"
      },
      "getETHBalance(address)": {
        "notice": "Returns the current ETH balance of account `account`"
      },
      "getHash(address)": {
        "notice": "Returns the current hash of split `split`"
      },
      "getNewPotentialController(address)": {
        "notice": "Returns the current newPotentialController of split `split`"
      },
      "makeSplitImmutable(address)": {
        "notice": "Turns mutable split `split` immutable"
      },
      "predictImmutableSplitAddress(address[],uint32[],uint32)": {
        "notice": "Predicts the address for an immutable split created with recipients `accounts` with ownerships `percentAllocations` and a keeper fee for splitting of `distributionFee`"
      },
      "transferControl(address,address)": {
        "notice": "Begins transfer of the controlling address of mutable split `split` to `newController`"
      },
      "updateSplit(address,address[],uint32[],uint32)": {
        "notice": "Updates an existing split with recipients `accounts` with ownerships `percentAllocations` and a keeper fee for splitting of `distributionFee`"
      },
      "walletImplementation()": {
        "notice": "address of wallet implementation for split proxies"
      },
      "withdraw(address,bool,address[])": {
        "notice": "Withdraw ETH &/ ERC20 balances for account `account`"
      }
    },
    "notice": "A composable and gas-efficient protocol for deploying splitter contracts.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 784,
        "contract": "contracts/0xSplits/SplitMain.sol:SplitMain",
        "label": "ethBalances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 792,
        "contract": "contracts/0xSplits/SplitMain.sol:SplitMain",
        "label": "erc20Balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_contract(ERC20)394,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 798,
        "contract": "contracts/0xSplits/SplitMain.sol:SplitMain",
        "label": "splits",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Split)767_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20)394": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Split)767_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SplitMain.Split)",
        "numberOfBytes": "32",
        "value": "t_struct(Split)767_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(ERC20)394,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(ERC20)394",
        "label": "mapping(contract ERC20 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_struct(Split)767_storage": {
        "encoding": "inplace",
        "label": "struct SplitMain.Split",
        "members": [
          {
            "astId": 762,
            "contract": "contracts/0xSplits/SplitMain.sol:SplitMain",
            "label": "hash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 764,
            "contract": "contracts/0xSplits/SplitMain.sol:SplitMain",
            "label": "controller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 766,
            "contract": "contracts/0xSplits/SplitMain.sol:SplitMain",
            "label": "newPotentialController",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
